<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Fabian's Footnotes - software</title><link href="https://bean.solutions/" rel="alternate"></link><link href="https://bean.solutions/feeds/software.atom.xml" rel="self"></link><id>https://bean.solutions/</id><updated>2021-01-21T21:00:00+01:00</updated><entry><title>Putting regexes where they don't belong</title><link href="https://bean.solutions/putting-regexes-where-they-dont-belong.html" rel="alternate"></link><published>2021-01-21T21:00:00+01:00</published><updated>2021-01-21T21:00:00+01:00</updated><author><name>Fabian Homborg</name></author><id>tag:bean.solutions,2021-01-21:/putting-regexes-where-they-dont-belong.html</id><summary type="html">&lt;p&gt;This is the story of a hack.&lt;/p&gt;
&lt;p&gt;It's not anything &lt;em&gt;wrong&lt;/em&gt; or &lt;em&gt;bad&lt;/em&gt;. It works quite well, but it just has that... quality. The one where you see it and you laugh in amused disgust.&lt;/p&gt;
&lt;p&gt;This is the story of how I made python do regexes when it shouldn't do â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the story of a hack.&lt;/p&gt;
&lt;p&gt;It's not anything &lt;em&gt;wrong&lt;/em&gt; or &lt;em&gt;bad&lt;/em&gt;. It works quite well, but it just has that... quality. The one where you see it and you laugh in amused disgust.&lt;/p&gt;
&lt;p&gt;This is the story of how I made python do regexes when it shouldn't do regexes.&lt;/p&gt;
&lt;div class="section" id="the-motive"&gt;
&lt;h2&gt;The motive&lt;/h2&gt;
&lt;p&gt;I've blogged about littlecheck before. It's fish's script test driver &lt;a class="footnote-reference" href="#id6" id="id1"&gt;[1]&lt;/a&gt;. The way it works is that you write a script, and then you write the output you expect into &lt;tt class="docutils literal"&gt;# CHECK:&lt;/tt&gt; comments inside the script.&lt;/p&gt;
&lt;p&gt;Littlecheck then lets whatever interpreter you picked run the script and compares its output to all the &lt;tt class="docutils literal"&gt;# CHECK:&lt;/tt&gt; lines. This is super simple and works quite well in practice. Here's an example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#!/bin/sh
echo Hello!
# CHECK: Hello!

echo Goodbye
# CHECK: Goodbye

echo No check for this
# ^^ Oh no, that one will fail.
&lt;/pre&gt;
&lt;p&gt;Only... when things went wrong, littlecheck did this naive comparison where it complained about the first line that was wrong, and then let you figure out the context of all of that.&lt;/p&gt;
&lt;p&gt;Was it a superfluous line of output? A &lt;tt class="docutils literal"&gt;# CHECK&lt;/tt&gt; too many? Or actually a line that was different from what was expected?&lt;/p&gt;
&lt;p&gt;It didn't tell you. It just said &amp;quot;this line doesn't look like this CHECK on line XYZ, also here's the rest of the output&amp;quot;.&lt;/p&gt;
&lt;p&gt;Now, if you've been around unix a few times, you might know what this is a problem for: diff!&lt;/p&gt;
&lt;p&gt;You have a bunch of lines on one side, a bunch on the other and you want to know what the &lt;strong&gt;diff&lt;/strong&gt;-erence is between the two, so you run &lt;tt class="docutils literal"&gt;diff&lt;/tt&gt; on them!&lt;/p&gt;
&lt;p&gt;Well, yeah, you would. Only there's a problem: Littlecheck does regexes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-means"&gt;
&lt;h2&gt;The Means&lt;/h2&gt;
&lt;p&gt;The venerable &lt;tt class="docutils literal"&gt;diff&lt;/tt&gt; utility doesn't handle regexes, and we wouldn't want to launch it anyway &lt;a class="footnote-reference" href="#id7" id="id2"&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But Littlecheck is written in python, and that has a lot of stuff in the standard library. Maybe there's a diffing tool?&lt;/p&gt;
&lt;p&gt;Oh, there's a &lt;tt class="docutils literal"&gt;difflib&lt;/tt&gt;. Cool!&lt;/p&gt;
&lt;p&gt;And python can do regexes - that's what we use to match them in the first place. So let's just pass a comparator to the &amp;quot;SequenceMatcher&amp;quot; thing and be done with it.&lt;/p&gt;
&lt;p&gt;Right?&lt;/p&gt;
&lt;p&gt;difflib's &lt;tt class="docutils literal"&gt;SequenceMatcher&lt;/tt&gt; doesn't take a comparator function, or key, or something comparable (hah!) &lt;a class="footnote-reference" href="#id8" id="id3"&gt;[3]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-opportunity"&gt;
&lt;h2&gt;The Opportunity&lt;/h2&gt;
&lt;p&gt;Where we're going we don't need comparator functions.&lt;/p&gt;
&lt;p&gt;It turns out SequenceMatcher takes its arguments as a list. So how about instead of passing strings we pass the regex objects? No, that won't work because the other side is still strings, so when it compares the two it'll just always be false.&lt;/p&gt;
&lt;p&gt;So what if we overload the list's &lt;tt class="docutils literal"&gt;__contains__&lt;/tt&gt; function? Well, no, that won't work because SequenceMatcher takes the list and puts the elements into a dictionary &lt;a class="footnote-reference" href="#id9" id="id4"&gt;[4]&lt;/a&gt; that we don't control.&lt;/p&gt;
&lt;p&gt;So... how about we override the equality operator? Well, not quite. Since it's a dictionary it first tries hash comparisons. Luckily, that goes via the &lt;tt class="docutils literal"&gt;__hash__&lt;/tt&gt; function, so I can write the most awful python I have ever written:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__hash__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Chosen by fair diceroll&lt;/span&gt;
    &lt;span class="c1"&gt;# No, just kidding.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This makes the hash comparison always collide, so whenever python checks if something is &lt;tt class="docutils literal"&gt;in&lt;/tt&gt; the dictionary it'll have to take the long route and do an actual comparison. After that, we hack the &lt;tt class="docutils literal"&gt;__eq__&lt;/tt&gt; function to do a regex match:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__eq__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CheckCmd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# We only compare the text here so SequenceMatcher can reshuffle these&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;NotImplementedError&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From there it's smooth sailing putting lipstick on this pig... boat &lt;a class="footnote-reference" href="#id10" id="id5"&gt;[5]&lt;/a&gt;, and this is what it looks like:&lt;/p&gt;
&lt;img alt="Example output. It shows that Littlecheck can identify errors somewhere in the middle without misinterpreting everything after." src="img/littlecheck-diff.png" style="width: 800px;" /&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Not to be confused with the unit test driver or the interactive test driver&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Littlecheck is a single-file utility with no dependencies other than python, we'd like to keep it that way.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;To be honest I don't think difflib is &amp;quot;great&amp;quot;. It's mostly a collection of things that someone found useful, once, and the API is a mess.
Also: I intend all my puns. Even the accidental ones I intend in principle.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id9" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;In what I'm pretty sure is an example of premature optimization. That or someone ran this stuff on gigabytes of text and expected an answer in milliseconds.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Mixing metaphors is good fun, actually&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="software"></category></entry><entry><title>Terminals are kinda bad</title><link href="https://bean.solutions/terminals-are-kinda-bad.html" rel="alternate"></link><published>2020-12-08T19:00:00+01:00</published><updated>2020-12-08T19:00:00+01:00</updated><author><name>Fabian Homborg</name></author><id>tag:bean.solutions,2020-12-08:/terminals-are-kinda-bad.html</id><summary type="html">&lt;p&gt;I spend a lot of my time in terminals.&lt;/p&gt;
&lt;p&gt;That's probably a bit of an understatement. Really, basically all of my time on a computer is spent either in a browser, in a videogame or in a terminal. I like text-based interfaces, and I still don't know why I would â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I spend a lot of my time in terminals.&lt;/p&gt;
&lt;p&gt;That's probably a bit of an understatement. Really, basically all of my time on a computer is spent either in a browser, in a videogame or in a terminal. I like text-based interfaces, and I still don't know why I would use the emacs GUI.&lt;/p&gt;
&lt;p&gt;So it probably won't be a surprise that I think our terminals are kinda... bad. Here's a few reasons why:&lt;/p&gt;
&lt;div class="section" id="arbitrary-limitations"&gt;
&lt;h2&gt;Arbitrary limitations&lt;/h2&gt;
&lt;p&gt;Ever wondered why you can't bind Control+I separately from tab?&lt;/p&gt;
&lt;p&gt;Well, the reason for that is ASCII. &amp;quot;I&amp;quot; is 73 (0x49), the tab character is 9 (0x09), and applying a control modifier masks off the upper 3 bits, so 73 - 64 = 9.
That means, as far as the application is concerned, there is no way to tell tab from Control+I. It is the same thing.&lt;/p&gt;
&lt;p&gt;Similarly, there is no such thing as an &amp;quot;alt&amp;quot; key. There might be on your keyboard, but as far as your terminal is concerned it's really a fancy way of saying &amp;quot;escape&amp;quot;. Pressing alt+e will send the escape character quickly followed by the &amp;quot;e&amp;quot; character. The way applications handle this is to wait for a bit after seeing an escape character to determine if it was an escape key that was pressed or an escape sequence.&lt;/p&gt;
&lt;p&gt;This is one of the many many arbitrary limitations that our current terminals have that just aren't intrinsic to the text-based paradigm. There is no reason this needs to be that way, except that somebody in the 70s made it so and nobody has managed to change it.&lt;/p&gt;
&lt;p&gt;Of course you could make a terminal that improves on this, but:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="terminal-inconsistencies"&gt;
&lt;h2&gt;Terminal inconsistencies&lt;/h2&gt;
&lt;p&gt;There are a lot of terminals, and a lot of variety in what they support and how they behave.&lt;/p&gt;
&lt;p&gt;Some common differences:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How many colors does it support?&lt;/li&gt;
&lt;li&gt;What escape sequences does it send for which keys?&lt;/li&gt;
&lt;li&gt;What optional features does it support? Can I send my PWD to it? Does it show a title?&lt;/li&gt;
&lt;li&gt;Does it reflow text on its own? VTE and iTerm do, konsole doesn't&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To me, many of these differences just seem entirely pointless. Why does this send &lt;tt class="docutils literal"&gt;\x7f&lt;/tt&gt; for my backspace key while that sends &lt;tt class="docutils literal"&gt;\b&lt;/tt&gt; (the actual backspace character)? There is an answer, but it's a historical one rather than a technical one.&lt;/p&gt;
&lt;p&gt;Another example: Konsole and iTerm both support cursor shaping (which is useful e.g. for vi-mode - make your cursor a block in normal mode and a &lt;tt class="docutils literal"&gt;|&lt;/tt&gt; bar in insert mode). The sequences, as far as I can tell, work exactly the same &lt;a class="footnote-reference" href="#id9" id="id1"&gt;[1]&lt;/a&gt;, but one uses &lt;tt class="docutils literal"&gt;\e]50;CursorShape=0\x7&lt;/tt&gt;, while the other uses &lt;tt class="docutils literal"&gt;\e]1337;CursorShape=0\x7&lt;/tt&gt;. See the difference? Yeah, that's a &amp;quot;1337&amp;quot; in place of a &amp;quot;50&amp;quot;. Cute. &lt;a class="footnote-reference" href="#id10" id="id2"&gt;[2]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But hey, you can surely detect these small differences automatically, right?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="detection-sucks"&gt;
&lt;h2&gt;Detection sucks&lt;/h2&gt;
&lt;p&gt;Hahaha, no.&lt;/p&gt;
&lt;p&gt;The primary way to detect what terminal your user is using and what it can do is $TERM, which is an environment variable that explains the type of terminal. You're supposed to use it to look at the actual terminal description in a thing called &amp;quot;terminfo&amp;quot;. &lt;a class="footnote-reference" href="#id11" id="id3"&gt;[3]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Only terminfo is basically broken.&lt;/p&gt;
&lt;p&gt;Why? Well:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;You need the actual files installed to be able to look it up, which means your OS needs to provide them&lt;/li&gt;
&lt;li&gt;People connect to servers via ssh, which just sends the $TERM value along, so all software running on that server will have to look up the terminfo for the terminal running on the (typically much newer) client, and if they don't find it they will fail to see anything and might even crash.&lt;/li&gt;
&lt;li&gt;Adding a new terminfo entry is possible, but with LTS distributions there's a &lt;em&gt;looong&lt;/em&gt; lag. &lt;a class="footnote-reference" href="#id12" id="id4"&gt;[4]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Some (arguably badly written) software just hardcodes a few $TERM values it knows, mostly &amp;quot;xterm*&amp;quot;. &lt;a class="footnote-reference" href="#id13" id="id5"&gt;[5]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The most used terminals are, for the most part, basically xterm-compatible-ish&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because of this, almost every terminal claims to be some form of &amp;quot;xterm&amp;quot; - most often &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;xterm-256color&lt;/span&gt;&lt;/tt&gt;. Some people claim that this is wrong and you should simply configure the terminal to use its own terminfo entry (&lt;a class="reference external" href="http://jdebp.uk./Softwares/nosh/guide/commands/TERM.xml"&gt;e.g.&lt;/a&gt;). I can't agree - that just makes ssh'ing awkward, breaks programs and, most importantly, would require me to tell users to reconfigure their terminal.&lt;/p&gt;
&lt;p&gt;Which means, if I want to distinguish gnome-terminal from konsole, I need to look elsewhere - both claim to be xterm-256color by default.&lt;/p&gt;
&lt;p&gt;But at least I can use terminfo as a baseline, right?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="terminfo-is-woefully-incomplete-or-wrong"&gt;
&lt;h2&gt;Terminfo is woefully incomplete or wrong&lt;/h2&gt;
&lt;p&gt;Remember that &lt;tt class="docutils literal"&gt;CursorShape&lt;/tt&gt; sequence from above? There &lt;em&gt;is&lt;/em&gt; an entry in terminfo for that, by the wonderfully descriptive name of &amp;quot;DECSCUSR&amp;quot; or &amp;quot;Ss&amp;quot; for short&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; infocmp -x &lt;span class="o"&gt;|&lt;/span&gt; grep -o &lt;span class="s1"&gt;&amp;#39;Ss=.*&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;Ss&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="se"&gt;\E&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;%p1%d q,
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;..but it uses the actual xterm value of &lt;tt class="docutils literal"&gt;\e[something q&lt;/tt&gt;, not the konsole or iTerm value of &lt;tt class="docutils literal"&gt;\e]50/1337something&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;And even if it did, you still couldn't use it, because macOS' terminfo is old and crusty and doesn't have Ss, at all.&lt;/p&gt;
&lt;p&gt;Of course when I say &amp;quot;wrong&amp;quot; here, it's not that I'm blaming the terminfo for not matching up to a terminal it's never been written for. I'm just saying that the terminfo is, from the application's perspective, wrong. It says things that simply aren't correct. I'm not interested in finding someone to blame, I'm interested in things being broken.&lt;/p&gt;
&lt;p&gt;Or consider the sequence to communicate the current directory to the terminal. As far as I can tell, that one is &lt;em&gt;actually defined&lt;/em&gt; as being &amp;quot;OSC 7&amp;quot; &lt;a class="footnote-reference" href="#id14" id="id6"&gt;[6]&lt;/a&gt;. OSC is an acronym and stands for &lt;tt class="docutils literal"&gt;\e]&lt;/tt&gt;. &lt;a class="footnote-reference" href="#id15" id="id7"&gt;[7]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There is, as best as I can tell, no terminfo entry for it, and I'm really not expecting any.&lt;/p&gt;
&lt;p&gt;What's more, the semantics for OSC 7 are weirdly complicated. Here's how fish handles it&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="se"&gt;\e\]&lt;/span&gt;7&lt;span class="se"&gt;\;&lt;/span&gt;file://%s%s&lt;span class="se"&gt;\a&lt;/span&gt; &lt;span class="nv"&gt;$hostname&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;string escape --style&lt;span class="o"&gt;=&lt;/span&gt;url &lt;span class="nv"&gt;$PWD&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So it starts with an escape, then a &lt;tt class="docutils literal"&gt;]7;&lt;/tt&gt;, then &lt;em&gt;a url to the current directory&lt;/em&gt;. With actual URL-encoding. In a terminal. And then it ends with a bel character, just to make sure this wakes up anyone who uses a terminal that doesn't support it.&lt;/p&gt;
&lt;p&gt;Or consider that it took &lt;em&gt;an actual literal decade&lt;/em&gt; for terminfo to finally gain a way to say that a terminal supports 24-bit true color. &lt;a class="footnote-reference" href="#id16" id="id8"&gt;[8]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-do-we-fix-it"&gt;
&lt;h2&gt;How do we fix it?&lt;/h2&gt;
&lt;p&gt;So if we wanted to fix this, what would have to be done?&lt;/p&gt;
&lt;p&gt;We would need standardization, and flexible standardization at that.&lt;/p&gt;
&lt;p&gt;My preferred solution would be a mix of having an actual baseline of support combined with making optional features just ignored by the terminal if it doesn't want to support them.&lt;/p&gt;
&lt;p&gt;For many things, the application doesn't really &lt;em&gt;care&lt;/em&gt; if it necessarily ends up being used, it just wants to not break things. For example the cursor shaping sequence should either cause the cursor to be changed or nothing to happen, so the application can just fire and forget.&lt;/p&gt;
&lt;p&gt;Or truecolor sequences should just be used basically everywhere, in the same format (the &amp;quot;correct&amp;quot; syntax uses colons, but most terminals support it with semicolons, some do both). If the terminal is incapable of rendering truecolor, let it pick the nearest color and use that instead.&lt;/p&gt;
&lt;p&gt;Key escapes should just be the same everywhere, and there should be standardized sequences for expressing e.g. ctrl-i as a distinct keycombination from tab.&lt;/p&gt;
&lt;p&gt;So a terminal would set $NU_TERM to true, and it would signal to the app that the baseline is safe to use. If the app wants to have ctrl-i encoded specially, it should send &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;\e]666;to-the-future!\a&lt;/span&gt;&lt;/tt&gt;, and everything should be grand and kittens will fall from the heavens (and safely land on their cute little feetsies, of course).&lt;/p&gt;
&lt;p&gt;And people would have to stop using bad terminals.&lt;/p&gt;
&lt;p&gt;I'm not holding my breath.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="footnotes"&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;table class="docutils footnote" frame="void" id="id9" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;unlike the xterm one that provides other features like cursor blinking&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Note: None of this is a slight against the Konsole or iTerm developers.
I've had contact with at least iTerm's maintainer, and he's never been anything but lovely.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id11" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;There is also termcap, which is slightly different. I'm mostly familiar with terminfo so I'm gonna talk about that.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id12" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Alacritty had its entry added to the ncurses terminfo in 2018, and in 2020 you wouldn't expect most servers to have it.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id13" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;This includes &lt;strong&gt;emacs&lt;/strong&gt; - it has its own terminal database that entries need to be added to.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id14" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id6"&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Not that I've ever found any good documentation on any of this, mind you.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id15" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id7"&gt;[7]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Ackchually it stands for &amp;quot;Operating System Control&amp;quot;, for some reason.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id16" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id8"&gt;[8]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;terminfo support arrived in 2018 with ncurses 6.1. Konsole had truecolor support in &lt;strong&gt;2008&lt;/strong&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="software"></category></entry><entry><title>Your Defaults Could Be Better</title><link href="https://bean.solutions/your-defaults-could-be-better.html" rel="alternate"></link><published>2020-05-23T12:30:00+02:00</published><updated>2020-05-23T12:30:00+02:00</updated><author><name>Fabian Homborg</name></author><id>tag:bean.solutions,2020-05-23:/your-defaults-could-be-better.html</id><summary type="html">&lt;p&gt;My Emacs configuration is 655 lines.&lt;/p&gt;
&lt;p&gt;This means a few things:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I need to add 11 more.&lt;/li&gt;
&lt;li&gt;Emacs is amazingly configurable and programmable &lt;a class="footnote-reference" href="#id5" id="id1"&gt;[1]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Emacs could really stand to have some of these as defaults.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What do I mean by that last thing?&lt;/p&gt;
&lt;p&gt;Well, see for yourself. Here's emacs as â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;My Emacs configuration is 655 lines.&lt;/p&gt;
&lt;p&gt;This means a few things:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I need to add 11 more.&lt;/li&gt;
&lt;li&gt;Emacs is amazingly configurable and programmable &lt;a class="footnote-reference" href="#id5" id="id1"&gt;[1]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Emacs could really stand to have some of these as defaults.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What do I mean by that last thing?&lt;/p&gt;
&lt;p&gt;Well, see for yourself. Here's emacs as it ships, out of the box:&lt;/p&gt;
&lt;img alt="The default emacs look" src="img/emacs-default.png" style="width: 400px;" /&gt;
&lt;p&gt;There is one word for that colorscheme, and it's ugly. It's legendarily ugly, enough so that it is known as &amp;quot;angry fruit salad&amp;quot;.&lt;/p&gt;
&lt;p&gt;Now. What if we changed that? What if the default Emacs colorscheme was... you know... acceptable? It's not like there's a colorscheme that's perfect for all users, but it's definitely better than the current one.&lt;/p&gt;
&lt;p&gt;Here's what that same file looks like with a different colorscheme and line-number display:&lt;/p&gt;
&lt;img alt="Emacs with the Cyberpunk colorscheme applied" src="img/emacs-better.png" style="width: 400px;" /&gt;
&lt;p&gt;Is that not nicer?&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;There is one change I always want to do on every single linux system I have access to, and that is changing the readline bindings for the up/down arrow.&lt;/p&gt;
&lt;p&gt;By default they step through the history incrementally. Press up once for the last command, press again for the second-to-last, press again for the one before that, and so on.
If you've entered something previously, it's overwritten by the command, it goes strictly chronologically.&lt;/p&gt;
&lt;p&gt;There's an alternative binding called &amp;quot;history-search-backward&amp;quot; that does the same thing, &lt;em&gt;iff&lt;/em&gt; the buffer is empty when you start.
The magic happens when you've entered something, in which case it will step through the history, but only show entries that &lt;em&gt;match&lt;/em&gt; what you have entered.&lt;/p&gt;
&lt;p&gt;The beauty of this is that it does strictly &lt;em&gt;more&lt;/em&gt; - if you want to step through the history, you can! Just have an empty buffer and press up! If you want to search, you can! Just enter what you want, and press up!&lt;/p&gt;
&lt;p&gt;Is that not nicer? &lt;a class="footnote-reference" href="#id6" id="id2"&gt;[2]&lt;/a&gt;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Most software has defaults that just accumulated over time. Features were introduced, and disabled by default. Configuration variables were added, and set to a certain default.
Everyone is afraid of changing the defaults because it might alienate people who like the current defaults, and it's always easy to tell people that &amp;quot;it's configurable&amp;quot;.&lt;/p&gt;
&lt;p&gt;There are other ways to go about this. There are some projects to provide better defaults, like &amp;quot;vim-sensible&amp;quot; &lt;a class="footnote-reference" href="#id7" id="id3"&gt;[3]&lt;/a&gt;. Of course that means people have to know about them and configure them. That works for some, personally I'd rather just install emacs and not &lt;em&gt;have&lt;/em&gt; to do anything to not get angry fruit salad. &lt;a class="footnote-reference" href="#id8" id="id4"&gt;[4]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What I'm getting at is: There is a better way. We could just change the defaults. Of course it would be possible to change the wrong defaults, but that's just design.&lt;/p&gt;
&lt;div class="section" id="footnotes"&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;table class="docutils footnote" frame="void" id="id5" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;It &lt;em&gt;ships&lt;/em&gt; with Tetris.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Of course there's a bit of disclaimer needed here. I'm involved with the fish shell - which you might view as a competitor to bash, and that notably has a default like history-search-backward. I think the point stands - the default &lt;em&gt;in readline&lt;/em&gt; is bad and should be changed.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;It's full of stuff like &amp;quot;show where the search string matches&amp;quot; and &amp;quot;enable syntax highlighting&amp;quot;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I would of course still configure 50 other things - there are 650 other lines in my config, after all.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="software"></category></entry></feed>