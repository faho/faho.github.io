<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Fabian's Footnotes</title><link href="https://bean.solutions/" rel="alternate"></link><link href="https://bean.solutions/feeds/all.atom.xml" rel="self"></link><id>https://bean.solutions/</id><updated>2021-01-21T21:00:00+01:00</updated><entry><title>Putting regexes where they don't belong</title><link href="https://bean.solutions/putting-regexes-where-they-dont-belong.html" rel="alternate"></link><published>2021-01-21T21:00:00+01:00</published><updated>2021-01-21T21:00:00+01:00</updated><author><name>Fabian Homborg</name></author><id>tag:bean.solutions,2021-01-21:/putting-regexes-where-they-dont-belong.html</id><summary type="html">&lt;p&gt;This is the story of a hack.&lt;/p&gt;
&lt;p&gt;It's not anything &lt;em&gt;wrong&lt;/em&gt; or &lt;em&gt;bad&lt;/em&gt;. It works quite well, but it just has that... quality. The one where you see it and you laugh in amused disgust.&lt;/p&gt;
&lt;p&gt;This is the story of how I made python do regexes when it shouldn't do â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the story of a hack.&lt;/p&gt;
&lt;p&gt;It's not anything &lt;em&gt;wrong&lt;/em&gt; or &lt;em&gt;bad&lt;/em&gt;. It works quite well, but it just has that... quality. The one where you see it and you laugh in amused disgust.&lt;/p&gt;
&lt;p&gt;This is the story of how I made python do regexes when it shouldn't do regexes.&lt;/p&gt;
&lt;div class="section" id="the-motive"&gt;
&lt;h2&gt;The motive&lt;/h2&gt;
&lt;p&gt;I've blogged about littlecheck before. It's fish's script test driver &lt;a class="footnote-reference" href="#id6" id="id1"&gt;[1]&lt;/a&gt;. The way it works is that you write a script, and then you write the output you expect into &lt;tt class="docutils literal"&gt;# CHECK:&lt;/tt&gt; comments inside the script.&lt;/p&gt;
&lt;p&gt;Littlecheck then lets whatever interpreter you picked run the script and compares its output to all the &lt;tt class="docutils literal"&gt;# CHECK:&lt;/tt&gt; lines. This is super simple and works quite well in practice. Here's an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; Hello!
&lt;span class="c1"&gt;# CHECK: Hello!&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; Goodbye
&lt;span class="c1"&gt;# CHECK: Goodbye&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; No check &lt;span class="k"&gt;for&lt;/span&gt; this
&lt;span class="c1"&gt;# ^^ Oh no, that one will fail.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Only... when things went wrong, littlecheck did this naive comparison where it complained about the first line that was wrong, and then let you figure out the context of all of that.&lt;/p&gt;
&lt;p&gt;Was it a superfluous line of output? A &lt;tt class="docutils literal"&gt;# CHECK&lt;/tt&gt; too many? Or actually a line that was different from what was expected?&lt;/p&gt;
&lt;p&gt;It didn't tell you. It just said &amp;quot;this line doesn't look like this CHECK on line XYZ, also here's the rest of the output&amp;quot;.&lt;/p&gt;
&lt;p&gt;Now, if you've been around unix a few times, you might know what this is a problem for: diff!&lt;/p&gt;
&lt;p&gt;You have a bunch of lines on one side, a bunch on the other and you want to know what the &lt;strong&gt;diff&lt;/strong&gt;-erence is between the two, so you run &lt;tt class="docutils literal"&gt;diff&lt;/tt&gt; on them!&lt;/p&gt;
&lt;p&gt;Well, yeah, you would. Only there's a problem: Littlecheck does regexes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-means"&gt;
&lt;h2&gt;The Means&lt;/h2&gt;
&lt;p&gt;The venerable &lt;tt class="docutils literal"&gt;diff&lt;/tt&gt; utility doesn't handle regexes, and we wouldn't want to launch it anyway &lt;a class="footnote-reference" href="#id7" id="id2"&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But Littlecheck is written in python, and that has a lot of stuff in the standard library. Maybe there's a diffing tool?&lt;/p&gt;
&lt;p&gt;Oh, there's a &lt;tt class="docutils literal"&gt;difflib&lt;/tt&gt;. Cool!&lt;/p&gt;
&lt;p&gt;And python can do regexes - that's what we use to match them in the first place. So let's just pass a comparator to the &amp;quot;SequenceMatcher&amp;quot; thing and be done with it.&lt;/p&gt;
&lt;p&gt;Right?&lt;/p&gt;
&lt;p&gt;difflib's &lt;tt class="docutils literal"&gt;SequenceMatcher&lt;/tt&gt; doesn't take a comparator function, or key, or something comparable (hah!) &lt;a class="footnote-reference" href="#id8" id="id3"&gt;[3]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-opportunity"&gt;
&lt;h2&gt;The Opportunity&lt;/h2&gt;
&lt;p&gt;Where we're going we don't need comparator functions.&lt;/p&gt;
&lt;p&gt;It turns out SequenceMatcher takes its arguments as a list. So how about instead of passing strings we pass the regex objects? No, that won't work because the other side is still strings, so when it compares the two it'll just always be false.&lt;/p&gt;
&lt;p&gt;So what if we overload the list's &lt;tt class="docutils literal"&gt;__contains__&lt;/tt&gt; function? Well, no, that won't work because SequenceMatcher takes the list and puts the elements into a dictionary &lt;a class="footnote-reference" href="#id9" id="id4"&gt;[4]&lt;/a&gt; that we don't control.&lt;/p&gt;
&lt;p&gt;So... how about we override the equality operator? Well, not quite. Since it's a dictionary it first tries hash comparisons. Luckily, that goes via the &lt;tt class="docutils literal"&gt;__hash__&lt;/tt&gt; function, so I can write the most awful python I have ever written:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__hash__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Chosen by fair diceroll&lt;/span&gt;
    &lt;span class="c1"&gt;# No, just kidding.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This makes the hash comparison always collide, so whenever python checks if something is &lt;tt class="docutils literal"&gt;in&lt;/tt&gt; the dictionary it'll have to take the long route and do an actual comparison. After that, we hack the &lt;tt class="docutils literal"&gt;__eq__&lt;/tt&gt; function to do a regex match:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__eq__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CheckCmd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# We only compare the text here so SequenceMatcher can reshuffle these&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;NotImplementedError&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From there it's smooth sailing putting lipstick on this pig... boat &lt;a class="footnote-reference" href="#id10" id="id5"&gt;[5]&lt;/a&gt;, and this is what it looks like:&lt;/p&gt;
&lt;img alt="Example output. It shows that Littlecheck can identify errors somewhere in the middle without misinterpreting everything after." src="img/littlecheck-diff.png" style="width: 800px;" /&gt;
&lt;p&gt;And that's the way I like it.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Not to be confused with the unit test driver or the interactive test driver&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Littlecheck is a single-file utility with no dependencies other than python, we'd like to keep it that way.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;To be honest I don't think difflib is &amp;quot;great&amp;quot;. It's mostly a collection of things that someone found useful, once, and the API is a mess.
Also: I intend all my puns. Even the accidental ones I intend in principle.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id9" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;In what I'm pretty sure is an example of premature optimization. That or someone ran this stuff on gigabytes of text and expected an answer in milliseconds.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Mixing metaphors is good fun, actually&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="software"></category></entry><entry><title>Terminals are kinda bad</title><link href="https://bean.solutions/terminals-are-kinda-bad.html" rel="alternate"></link><published>2020-12-08T19:00:00+01:00</published><updated>2020-12-08T19:00:00+01:00</updated><author><name>Fabian Homborg</name></author><id>tag:bean.solutions,2020-12-08:/terminals-are-kinda-bad.html</id><summary type="html">&lt;p&gt;I spend a lot of my time in terminals.&lt;/p&gt;
&lt;p&gt;That's probably a bit of an understatement. Really, basically all of my time on a computer is spent either in a browser, in a videogame or in a terminal. I like text-based interfaces, and I still don't know why I would â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I spend a lot of my time in terminals.&lt;/p&gt;
&lt;p&gt;That's probably a bit of an understatement. Really, basically all of my time on a computer is spent either in a browser, in a videogame or in a terminal. I like text-based interfaces, and I still don't know why I would use the emacs GUI.&lt;/p&gt;
&lt;p&gt;So it probably won't be a surprise that I think our terminals are kinda... bad. Here's a few reasons why:&lt;/p&gt;
&lt;div class="section" id="arbitrary-limitations"&gt;
&lt;h2&gt;Arbitrary limitations&lt;/h2&gt;
&lt;p&gt;Ever wondered why you can't bind Control+I separately from tab?&lt;/p&gt;
&lt;p&gt;Well, the reason for that is ASCII. &amp;quot;I&amp;quot; is 73 (0x49), the tab character is 9 (0x09), and applying a control modifier masks off the upper 3 bits, so 73 - 64 = 9.
That means, as far as the application is concerned, there is no way to tell tab from Control+I. It is the same thing.&lt;/p&gt;
&lt;p&gt;Similarly, there is no such thing as an &amp;quot;alt&amp;quot; key. There might be on your keyboard, but as far as your terminal is concerned it's really a fancy way of saying &amp;quot;escape&amp;quot;. Pressing alt+e will send the escape character quickly followed by the &amp;quot;e&amp;quot; character. The way applications handle this is to wait for a bit after seeing an escape character to determine if it was an escape key that was pressed or an escape sequence.&lt;/p&gt;
&lt;p&gt;This is one of the many many arbitrary limitations that our current terminals have that just aren't intrinsic to the text-based paradigm. There is no reason this needs to be that way, except that somebody in the 70s made it so and nobody has managed to change it.&lt;/p&gt;
&lt;p&gt;Of course you could make a terminal that improves on this, but:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="terminal-inconsistencies"&gt;
&lt;h2&gt;Terminal inconsistencies&lt;/h2&gt;
&lt;p&gt;There are a lot of terminals, and a lot of variety in what they support and how they behave.&lt;/p&gt;
&lt;p&gt;Some common differences:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How many colors does it support?&lt;/li&gt;
&lt;li&gt;What escape sequences does it send for which keys?&lt;/li&gt;
&lt;li&gt;What optional features does it support? Can I send my PWD to it? Does it show a title?&lt;/li&gt;
&lt;li&gt;Does it reflow text on its own? VTE and iTerm do, konsole doesn't&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To me, many of these differences just seem entirely pointless. Why does this send &lt;tt class="docutils literal"&gt;\x7f&lt;/tt&gt; for my backspace key while that sends &lt;tt class="docutils literal"&gt;\b&lt;/tt&gt; (the actual backspace character)? There is an answer, but it's a historical one rather than a technical one.&lt;/p&gt;
&lt;p&gt;Another example: Konsole and iTerm both support cursor shaping (which is useful e.g. for vi-mode - make your cursor a block in normal mode and a &lt;tt class="docutils literal"&gt;|&lt;/tt&gt; bar in insert mode). The sequences, as far as I can tell, work exactly the same &lt;a class="footnote-reference" href="#id9" id="id1"&gt;[1]&lt;/a&gt;, but one uses &lt;tt class="docutils literal"&gt;\e]50;CursorShape=0\x7&lt;/tt&gt;, while the other uses &lt;tt class="docutils literal"&gt;\e]1337;CursorShape=0\x7&lt;/tt&gt;. See the difference? Yeah, that's a &amp;quot;1337&amp;quot; in place of a &amp;quot;50&amp;quot;. Cute. &lt;a class="footnote-reference" href="#id10" id="id2"&gt;[2]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But hey, you can surely detect these small differences automatically, right?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="detection-sucks"&gt;
&lt;h2&gt;Detection sucks&lt;/h2&gt;
&lt;p&gt;Hahaha, no.&lt;/p&gt;
&lt;p&gt;The primary way to detect what terminal your user is using and what it can do is $TERM, which is an environment variable that explains the type of terminal. You're supposed to use it to look at the actual terminal description in a thing called &amp;quot;terminfo&amp;quot;. &lt;a class="footnote-reference" href="#id11" id="id3"&gt;[3]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Only terminfo is basically broken.&lt;/p&gt;
&lt;p&gt;Why? Well:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;You need the actual files installed to be able to look it up, which means your OS needs to provide them&lt;/li&gt;
&lt;li&gt;People connect to servers via ssh, which just sends the $TERM value along, so all software running on that server will have to look up the terminfo for the terminal running on the (typically much newer) client, and if they don't find it they will fail to see anything and might even crash.&lt;/li&gt;
&lt;li&gt;Adding a new terminfo entry is possible, but with LTS distributions there's a &lt;em&gt;looong&lt;/em&gt; lag. &lt;a class="footnote-reference" href="#id12" id="id4"&gt;[4]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Some (arguably badly written) software just hardcodes a few $TERM values it knows, mostly &amp;quot;xterm*&amp;quot;. &lt;a class="footnote-reference" href="#id13" id="id5"&gt;[5]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The most used terminals are, for the most part, basically xterm-compatible-ish&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because of this, almost every terminal claims to be some form of &amp;quot;xterm&amp;quot; - most often &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;xterm-256color&lt;/span&gt;&lt;/tt&gt;. Some people claim that this is wrong and you should simply configure the terminal to use its own terminfo entry (&lt;a class="reference external" href="http://jdebp.uk./Softwares/nosh/guide/commands/TERM.xml"&gt;e.g.&lt;/a&gt;). I can't agree - that just makes ssh'ing awkward, breaks programs and, most importantly, would require me to tell users to reconfigure their terminal.&lt;/p&gt;
&lt;p&gt;Which means, if I want to distinguish gnome-terminal from konsole, I need to look elsewhere - both claim to be xterm-256color by default.&lt;/p&gt;
&lt;p&gt;But at least I can use terminfo as a baseline, right?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="terminfo-is-woefully-incomplete-or-wrong"&gt;
&lt;h2&gt;Terminfo is woefully incomplete or wrong&lt;/h2&gt;
&lt;p&gt;Remember that &lt;tt class="docutils literal"&gt;CursorShape&lt;/tt&gt; sequence from above? There &lt;em&gt;is&lt;/em&gt; an entry in terminfo for that, by the wonderfully descriptive name of &amp;quot;DECSCUSR&amp;quot; or &amp;quot;Ss&amp;quot; for short&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; infocmp -x &lt;span class="o"&gt;|&lt;/span&gt; grep -o &lt;span class="s1"&gt;&amp;#39;Ss=.*&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;Ss&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="se"&gt;\E&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;%p1%d q,
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;..but it uses the actual xterm value of &lt;tt class="docutils literal"&gt;\e[something q&lt;/tt&gt;, not the konsole or iTerm value of &lt;tt class="docutils literal"&gt;\e]50/1337something&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;And even if it did, you still couldn't use it, because macOS' terminfo is old and crusty and doesn't have Ss, at all.&lt;/p&gt;
&lt;p&gt;Of course when I say &amp;quot;wrong&amp;quot; here, it's not that I'm blaming the terminfo for not matching up to a terminal it's never been written for. I'm just saying that the terminfo is, from the application's perspective, wrong. It says things that simply aren't correct. I'm not interested in finding someone to blame, I'm interested in things being broken.&lt;/p&gt;
&lt;p&gt;Or consider the sequence to communicate the current directory to the terminal. As far as I can tell, that one is &lt;em&gt;actually defined&lt;/em&gt; as being &amp;quot;OSC 7&amp;quot; &lt;a class="footnote-reference" href="#id14" id="id6"&gt;[6]&lt;/a&gt;. OSC is an acronym and stands for &lt;tt class="docutils literal"&gt;\e]&lt;/tt&gt;. &lt;a class="footnote-reference" href="#id15" id="id7"&gt;[7]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There is, as best as I can tell, no terminfo entry for it, and I'm really not expecting any.&lt;/p&gt;
&lt;p&gt;What's more, the semantics for OSC 7 are weirdly complicated. Here's how fish handles it&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="se"&gt;\e\]&lt;/span&gt;7&lt;span class="se"&gt;\;&lt;/span&gt;file://%s%s&lt;span class="se"&gt;\a&lt;/span&gt; &lt;span class="nv"&gt;$hostname&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;string escape --style&lt;span class="o"&gt;=&lt;/span&gt;url &lt;span class="nv"&gt;$PWD&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So it starts with an escape, then a &lt;tt class="docutils literal"&gt;]7;&lt;/tt&gt;, then &lt;em&gt;a url to the current directory&lt;/em&gt;. With actual URL-encoding. In a terminal. And then it ends with a bel character, just to make sure this wakes up anyone who uses a terminal that doesn't support it.&lt;/p&gt;
&lt;p&gt;Or consider that it took &lt;em&gt;an actual literal decade&lt;/em&gt; for terminfo to finally gain a way to say that a terminal supports 24-bit true color. &lt;a class="footnote-reference" href="#id16" id="id8"&gt;[8]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-do-we-fix-it"&gt;
&lt;h2&gt;How do we fix it?&lt;/h2&gt;
&lt;p&gt;So if we wanted to fix this, what would have to be done?&lt;/p&gt;
&lt;p&gt;We would need standardization, and flexible standardization at that.&lt;/p&gt;
&lt;p&gt;My preferred solution would be a mix of having an actual baseline of support combined with making optional features just ignored by the terminal if it doesn't want to support them.&lt;/p&gt;
&lt;p&gt;For many things, the application doesn't really &lt;em&gt;care&lt;/em&gt; if it necessarily ends up being used, it just wants to not break things. For example the cursor shaping sequence should either cause the cursor to be changed or nothing to happen, so the application can just fire and forget.&lt;/p&gt;
&lt;p&gt;Or truecolor sequences should just be used basically everywhere, in the same format (the &amp;quot;correct&amp;quot; syntax uses colons, but most terminals support it with semicolons, some do both). If the terminal is incapable of rendering truecolor, let it pick the nearest color and use that instead.&lt;/p&gt;
&lt;p&gt;Key escapes should just be the same everywhere, and there should be standardized sequences for expressing e.g. ctrl-i as a distinct keycombination from tab.&lt;/p&gt;
&lt;p&gt;So a terminal would set $NU_TERM to true, and it would signal to the app that the baseline is safe to use. If the app wants to have ctrl-i encoded specially, it should send &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;\e]666;to-the-future!\a&lt;/span&gt;&lt;/tt&gt;, and everything should be grand and kittens will fall from the heavens (and safely land on their cute little feetsies, of course).&lt;/p&gt;
&lt;p&gt;And people would have to stop using bad terminals.&lt;/p&gt;
&lt;p&gt;I'm not holding my breath.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="footnotes"&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;table class="docutils footnote" frame="void" id="id9" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;unlike the xterm one that provides other features like cursor blinking&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Note: None of this is a slight against the Konsole or iTerm developers.
I've had contact with at least iTerm's maintainer, and he's never been anything but lovely.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id11" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;There is also termcap, which is slightly different. I'm mostly familiar with terminfo so I'm gonna talk about that.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id12" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Alacritty had its entry added to the ncurses terminfo in 2018, and in 2020 you wouldn't expect most servers to have it.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id13" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;This includes &lt;strong&gt;emacs&lt;/strong&gt; - it has its own terminal database that entries need to be added to.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id14" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id6"&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Not that I've ever found any good documentation on any of this, mind you.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id15" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id7"&gt;[7]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Ackchually it stands for &amp;quot;Operating System Control&amp;quot;, for some reason.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id16" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id8"&gt;[8]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;terminfo support arrived in 2018 with ncurses 6.1. Konsole had truecolor support in &lt;strong&gt;2008&lt;/strong&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="software"></category></entry><entry><title>Your Defaults Could Be Better</title><link href="https://bean.solutions/your-defaults-could-be-better.html" rel="alternate"></link><published>2020-05-23T12:30:00+02:00</published><updated>2020-05-23T12:30:00+02:00</updated><author><name>Fabian Homborg</name></author><id>tag:bean.solutions,2020-05-23:/your-defaults-could-be-better.html</id><summary type="html">&lt;p&gt;My Emacs configuration is 655 lines.&lt;/p&gt;
&lt;p&gt;This means a few things:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I need to add 11 more.&lt;/li&gt;
&lt;li&gt;Emacs is amazingly configurable and programmable &lt;a class="footnote-reference" href="#id5" id="id1"&gt;[1]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Emacs could really stand to have some of these as defaults.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What do I mean by that last thing?&lt;/p&gt;
&lt;p&gt;Well, see for yourself. Here's emacs as â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;My Emacs configuration is 655 lines.&lt;/p&gt;
&lt;p&gt;This means a few things:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I need to add 11 more.&lt;/li&gt;
&lt;li&gt;Emacs is amazingly configurable and programmable &lt;a class="footnote-reference" href="#id5" id="id1"&gt;[1]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Emacs could really stand to have some of these as defaults.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What do I mean by that last thing?&lt;/p&gt;
&lt;p&gt;Well, see for yourself. Here's emacs as it ships, out of the box:&lt;/p&gt;
&lt;img alt="The default emacs look" src="img/emacs-default.png" style="width: 400px;" /&gt;
&lt;p&gt;There is one word for that colorscheme, and it's ugly. It's legendarily ugly, enough so that it is known as &amp;quot;angry fruit salad&amp;quot;.&lt;/p&gt;
&lt;p&gt;Now. What if we changed that? What if the default Emacs colorscheme was... you know... acceptable? It's not like there's a colorscheme that's perfect for all users, but it's definitely better than the current one.&lt;/p&gt;
&lt;p&gt;Here's what that same file looks like with a different colorscheme and line-number display:&lt;/p&gt;
&lt;img alt="Emacs with the Cyberpunk colorscheme applied" src="img/emacs-better.png" style="width: 400px;" /&gt;
&lt;p&gt;Is that not nicer?&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;There is one change I always want to do on every single linux system I have access to, and that is changing the readline bindings for the up/down arrow.&lt;/p&gt;
&lt;p&gt;By default they step through the history incrementally. Press up once for the last command, press again for the second-to-last, press again for the one before that, and so on.
If you've entered something previously, it's overwritten by the command, it goes strictly chronologically.&lt;/p&gt;
&lt;p&gt;There's an alternative binding called &amp;quot;history-search-backward&amp;quot; that does the same thing, &lt;em&gt;iff&lt;/em&gt; the buffer is empty when you start.
The magic happens when you've entered something, in which case it will step through the history, but only show entries that &lt;em&gt;match&lt;/em&gt; what you have entered.&lt;/p&gt;
&lt;p&gt;The beauty of this is that it does strictly &lt;em&gt;more&lt;/em&gt; - if you want to step through the history, you can! Just have an empty buffer and press up! If you want to search, you can! Just enter what you want, and press up!&lt;/p&gt;
&lt;p&gt;Is that not nicer? &lt;a class="footnote-reference" href="#id6" id="id2"&gt;[2]&lt;/a&gt;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Most software has defaults that just accumulated over time. Features were introduced, and disabled by default. Configuration variables were added, and set to a certain default.
Everyone is afraid of changing the defaults because it might alienate people who like the current defaults, and it's always easy to tell people that &amp;quot;it's configurable&amp;quot;.&lt;/p&gt;
&lt;p&gt;There are other ways to go about this. There are some projects to provide better defaults, like &amp;quot;vim-sensible&amp;quot; &lt;a class="footnote-reference" href="#id7" id="id3"&gt;[3]&lt;/a&gt;. Of course that means people have to know about them and configure them. That works for some, personally I'd rather just install emacs and not &lt;em&gt;have&lt;/em&gt; to do anything to not get angry fruit salad. &lt;a class="footnote-reference" href="#id8" id="id4"&gt;[4]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What I'm getting at is: There is a better way. We could just change the defaults. Of course it would be possible to change the wrong defaults, but that's just design.&lt;/p&gt;
&lt;div class="section" id="footnotes"&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;table class="docutils footnote" frame="void" id="id5" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;It &lt;em&gt;ships&lt;/em&gt; with Tetris.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Of course there's a bit of disclaimer needed here. I'm involved with the fish shell - which you might view as a competitor to bash, and that notably has a default like history-search-backward. I think the point stands - the default &lt;em&gt;in readline&lt;/em&gt; is bad and should be changed.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;It's full of stuff like &amp;quot;show where the search string matches&amp;quot; and &amp;quot;enable syntax highlighting&amp;quot;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I would of course still configure 50 other things - there are 650 other lines in my config, after all.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="software"></category></entry><entry><title>BashFAQ through fish's eyes</title><link href="https://bean.solutions/bashfaq-through-fishs-eyes.html" rel="alternate"></link><published>2019-12-07T14:40:00+01:00</published><updated>2019-12-07T14:40:00+01:00</updated><author><name>Fabian Homborg</name></author><id>tag:bean.solutions,2019-12-07:/bashfaq-through-fishs-eyes.html</id><summary type="html">&lt;p&gt;So here's one thing I wanted to do for a while. Let's look at the &lt;a class="reference external" href="http://mywiki.wooledge.org/BashFAQ"&gt;BashFAQ&lt;/a&gt; and see how it holds up in fish.&lt;/p&gt;
&lt;p&gt;This is not a comprehensive comparison (in particular the BashFAQ is by its nature something of a list of bash's most obvious problems) and I'm going â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;So here's one thing I wanted to do for a while. Let's look at the &lt;a class="reference external" href="http://mywiki.wooledge.org/BashFAQ"&gt;BashFAQ&lt;/a&gt; and see how it holds up in fish.&lt;/p&gt;
&lt;p&gt;This is not a comprehensive comparison (in particular the BashFAQ is by its nature something of a list of bash's most obvious problems) and I'm going to skip over uninteresting questions (including those that are substantially similar in both and those that deal with certain commands). Since much of this is down to Bash following POSIX most of the bash answers apply to e.g. dash and zsh as well.&lt;/p&gt;
&lt;p&gt;This isn't meant to bash (hehehe) bash, but more of an explanation of why we're bothering with our own scripting language at all. One of the most common comments whenever fish is discussed is &amp;quot;well, it's not POSIX compatible&amp;quot;, so this is, in part, an attempt to show &lt;em&gt;why&lt;/em&gt;.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;How can I read a file (data stream, variable) line-by-line (and/or field-by-field)?&lt;/p&gt;
&lt;p&gt;The bash answer: Don't try to use &amp;quot;for&amp;quot;. Use a while loop and the read command (specifically &lt;cite&gt;read -r&lt;/cite&gt; with IFS unset)&lt;/p&gt;
&lt;p&gt;The fish answer: A for-loop is fine (&lt;cite&gt;for line in (cat file)&lt;/cite&gt;), as is &lt;cite&gt;while read line&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;Fish doesn't do word-splitting the way bash does - it splits command substitutions on newlines, and while &lt;cite&gt;read&lt;/cite&gt; obeys $IFS it is the only part of fish to do so &lt;a class="footnote-reference" href="#id10" id="id1"&gt;[1]&lt;/a&gt; so $IFS isn't typically changed. If you want to be super-pedantic set $IFS to &lt;cite&gt;nt&lt;/cite&gt; before doing anything.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic" start="4"&gt;
&lt;li&gt;&lt;p class="first"&gt;How can I check whether a directory is empty or not? How do I check for any .mpg files, or count how many there are?&lt;/p&gt;
&lt;p&gt;The bash answer: Set nullglob, dotglob and an array. Possibly use subshells.&lt;/p&gt;
&lt;p&gt;The fish answer: Use &lt;cite&gt;count * .*&lt;/cite&gt;. Fish uses nullglob behavior for that, and doesn't have dotglob.&lt;/p&gt;
&lt;p&gt;The nice part here is that the answer is &lt;em&gt;always&lt;/em&gt; valid, and that you don't have to remember to set an option, possibly, if you haven't already set it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;How can I use array variables?&lt;/p&gt;
&lt;p&gt;The fish answer: Use &lt;cite&gt;set&lt;/cite&gt; to set/erase an &amp;quot;array&amp;quot; &lt;a class="footnote-reference" href="#id11" id="id2"&gt;[2]&lt;/a&gt; or any of its elements, use &lt;cite&gt;$var&lt;/cite&gt; to expand it fully and &lt;cite&gt;$var[slice]&lt;/cite&gt; to expand some of its elements (including &lt;cite&gt;$var[1..3 7..-2]&lt;/cite&gt;). Overall fish defaults to lists as first-class things, while bash added them onto POSIXoid syntax, so it needs to do a bunch of contortions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic" start="7"&gt;
&lt;li&gt;&lt;p class="first"&gt;Is there a function to return the length of a string?&lt;/p&gt;
&lt;p&gt;The bash answer: &lt;cite&gt;${#varname}&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;The fish answer: &lt;cite&gt;string length -q -- $varname&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;This is simply a case where fish prefers to use commands, while bash prefers syntax.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic" start="20"&gt;
&lt;li&gt;&lt;p class="first"&gt;How can I find and safely handle file names containing newlines, spaces or both?&lt;/p&gt;
&lt;p&gt;The bash answer: Complicated. Quote, use &lt;cite&gt;--&lt;/cite&gt;, use globs or &lt;cite&gt;find -print0&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;The fish anwer: Fish doesn't do word-splitting on variables and only splits command substitutions on newline, so you don't have to worry about spaces at all (apart from quoting them in literal arguments). Bash's &lt;cite&gt;read&lt;/cite&gt; also features a &lt;cite&gt;-d&lt;/cite&gt; option that can be passed a NULL as a delimiter via &lt;cite&gt;$'0'&lt;/cite&gt;. In fish you'd use &lt;cite&gt;read -z&lt;/cite&gt;. Also since fish doesn't put while-loops into subshells you can set variables inside them. Also since fish 3.0 &lt;cite&gt;string split0&lt;/cite&gt; is available to split an entire command substitution on NULLs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; file &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;find . -print0 &lt;span class="o"&gt;|&lt;/span&gt; string split0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;works.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic" start="22"&gt;
&lt;li&gt;&lt;p class="first"&gt;How can I calculate with floating point numbers instead of just integers?&lt;/p&gt;
&lt;p&gt;The bash answer: Bash's arithmetic does ints only, use &lt;cite&gt;bc&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;The fish answer, since fish 3.0: Use &lt;cite&gt;math&lt;/cite&gt;, and &lt;cite&gt;test&lt;/cite&gt; even for floating comparisons. Fish's &lt;cite&gt;math&lt;/cite&gt; used to be a function that called &lt;cite&gt;bc&lt;/cite&gt; in the background, but &lt;cite&gt;bc&lt;/cite&gt; has some major issues. For one macOS (being the paragon of current software that it is) ships a slightly-outdated version of bc that has problems with large results &lt;a class="footnote-reference" href="#id12" id="id3"&gt;[3]&lt;/a&gt; and bc can't do modulo and floats at the same time &lt;a class="footnote-reference" href="#id13" id="id4"&gt;[4]&lt;/a&gt;. Also &lt;cite&gt;bc&lt;/cite&gt; does a heck of a lot of stuff and we can't document all of it so there's always this weird corner where we'd have to send people to external documentation. So we wrote our own &lt;cite&gt;math&lt;/cite&gt; &lt;a class="footnote-reference" href="#id14" id="id5"&gt;[5]&lt;/a&gt;, and it should &lt;em&gt;just work&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic" start="24"&gt;
&lt;li&gt;&lt;p class="first"&gt;I set variables in a loop that's in a pipeline. Why do they disappear after the loop terminates? Or, why can't I pipe data to read?&lt;/p&gt;
&lt;p&gt;The bash answer: Subshells.&lt;/p&gt;
&lt;p&gt;The fish answer: They don't, unless you've scoped them to be local to the loop. Any variable defined with &lt;cite&gt;set -l&lt;/cite&gt; inside will disappear, but put that outside and &lt;cite&gt;set&lt;/cite&gt; it inside and it stays. No subshells here.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;How can I access positional parameters after $9?&lt;/p&gt;
&lt;p&gt;The bash answer: Use ${10} instead of $10. For other shells you might have to use &lt;cite&gt;shift&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;The fish answer: Use &lt;cite&gt;$argv[10]&lt;/cite&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic" start="35"&gt;
&lt;li&gt;&lt;p class="first"&gt;How can I handle command-line options and arguments in my script easily?&lt;/p&gt;
&lt;p&gt;The bash answer: Either manual parsing (&amp;quot;the most flexible approach, and is sufficient for most scripts. It is the best way, really&amp;quot;) or &lt;cite&gt;getopts&lt;/cite&gt;, never &lt;cite&gt;getopt&lt;/cite&gt; (because that doesn't do long options). The manual approach makes it hard to use grouped short options (like in &lt;cite&gt;ls -lah&lt;/cite&gt;).&lt;/p&gt;
&lt;p&gt;The fish answer: &lt;cite&gt;argparse&lt;/cite&gt;. This is one tool that was written explicitly as a reaction to questions about how to parse arguments.&lt;/p&gt;
&lt;p&gt;It's probably easiest to demonstrate with an example. So let's see how fish's &lt;cite&gt;abbr&lt;/cite&gt; function handles its arguments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; -l options --stop-nonopt --exclusive &lt;span class="s1"&gt;&amp;#39;a,r,e,l,s,q&amp;#39;&lt;/span&gt; --exclusive &lt;span class="s1"&gt;&amp;#39;g,U&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; -a options h/help a/add r/rename e/erase l/list s/show q/query
&lt;span class="k"&gt;set&lt;/span&gt; -a options g/global U/universal

argparse -n abbr &lt;span class="nv"&gt;$options&lt;/span&gt; -- &lt;span class="nv"&gt;$argv&lt;/span&gt;
&lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; -q _flag_help
    __fish_print_help abbr
    &lt;span class="k"&gt;return&lt;/span&gt; 0
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you see, &lt;cite&gt;argparse&lt;/cite&gt; gets a list of options to handle (with long and short versions), and then the arguments to parse. It puts the found options into $_flag_XYZ variables and leaves the positional arguments in $argv.&lt;/p&gt;
&lt;p&gt;This takes care of all the option ungrouping, finding option parameters and such, and can even be used to disallow option combinations and require a minimum or maximum number of arguments.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic" start="37"&gt;
&lt;li&gt;&lt;p class="first"&gt;How can I print text in various colors?&lt;/p&gt;
&lt;p&gt;The bash answer: Use &lt;cite&gt;tput&lt;/cite&gt;, like &lt;cite&gt;blue=$(tput setaf 4)&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;The fish answer: Use &lt;cite&gt;set_color&lt;/cite&gt;. Of course &lt;cite&gt;tput&lt;/cite&gt; would also work, but it's a bit weird to require an external tool for this &lt;a class="footnote-reference" href="#id15" id="id6"&gt;[6]&lt;/a&gt;, &lt;cite&gt;set_color&lt;/cite&gt; can take RGB or named colors &lt;a class="footnote-reference" href="#id16" id="id7"&gt;[7]&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic" start="39"&gt;
&lt;li&gt;&lt;p class="first"&gt;What are all the dot-files that bash reads?&lt;/p&gt;
&lt;p&gt;The bash answer: Depends on whether your shell is interactive and/or a login shell. Sometimes there are multiple options (&amp;quot;/etc/profile and then one of .bash_profile or .bash_login or .profile&amp;quot;).&lt;/p&gt;
&lt;p&gt;The fish answer: /etc/fish/config.fish and ~/.config/fish/config.fish &lt;a class="footnote-reference" href="#id17" id="id8"&gt;[8]&lt;/a&gt;. Always. In an interactive shell, a login shell, on tuesdays, when it's raining outside and whether your system is Debian or Solaris.&lt;/p&gt;
&lt;p&gt;This is one point where I'd argue it's a bit of an over-simplification. It's obvious to me that login-shells aren't special or useful enough to deserve their own config file (in fish you can guard bits behind &lt;cite&gt;if status is-login&lt;/cite&gt; and that seems entirely enough to me), but I think reading config.fish in non-interactive shells causes issues if you're using it as a script interpreter (via &lt;cite&gt;#!/usr/bin/env fish&lt;/cite&gt;).&lt;/p&gt;
&lt;p&gt;So personally I'd prefer if we didn't read config.fish in that case, but I don't have an answer as to what we should then read. Bash would do well with some simplification however.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic" start="41"&gt;
&lt;li&gt;&lt;p class="first"&gt;How do I determine whether a variable contains a substring?&lt;/p&gt;
&lt;p&gt;The bash answer: Use &lt;cite&gt;if [[ $foo = *bar* ]]&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;The fish answer: You want to do something with strings? Use &lt;cite&gt;string&lt;/cite&gt;. Here &lt;cite&gt;string match -- '*bar*' $foo&lt;/cite&gt; would do.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic" start="46"&gt;
&lt;li&gt;&lt;p class="first"&gt;I want to check to see whether a word is in a list (or an element is a member of a set).&lt;/p&gt;
&lt;p&gt;The bash answer: Use associative arrays (bash &amp;gt;= 4) or for-loops.&lt;/p&gt;
&lt;p&gt;In this case the associative array seems to be used purely for performance reasons and doesn't actually simplify the code (because you still need to loop through the things to set the array).&lt;/p&gt;
&lt;p&gt;The fish answer: Use &lt;cite&gt;contains&lt;/cite&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;read &lt;/span&gt;input
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;contains&lt;/span&gt; -- &lt;span class="nv"&gt;$input&lt;/span&gt; Bigfoot UFOs Republicans
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$input&lt;/span&gt; exists
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$input&lt;/span&gt; does &lt;span class="k"&gt;not&lt;/span&gt; exist
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic" start="51"&gt;
&lt;li&gt;&lt;p class="first"&gt;I want history-search just like in tcsh. How can I bind it to the up and down keys?&lt;/p&gt;
&lt;p&gt;The bash answer: Just add the following to /etc/inputrc or your ~/.inputrc:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\e[A&amp;quot;&lt;/span&gt;:history-search-backward
&lt;span class="s2"&gt;&amp;quot;\e[B&amp;quot;&lt;/span&gt;:history-search-forward
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The fish answer: It's bound like that by default.&lt;/p&gt;
&lt;p&gt;This is one of the first things I add whenever I use bash anywhere. It baffles me why it's not the default.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic" start="66"&gt;
&lt;li&gt;&lt;p class="first"&gt;I want to check if [[ $var == foo || $var == bar || $var == more ]] without repeating $var n times.&lt;/p&gt;
&lt;p&gt;The bash answer: Use &lt;cite&gt;case&lt;/cite&gt; or extglobs.&lt;/p&gt;
&lt;p&gt;The fish answer: Use &lt;cite&gt;contains&lt;/cite&gt; or &lt;cite&gt;case&lt;/cite&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;How can I trim leading/trailing white space from one of my variables?&lt;/p&gt;
&lt;p&gt;The bash answer: Use extglobs or incantations like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;junk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;var&lt;/span&gt;&lt;span class="p"&gt;%%[! ]*&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;   &lt;span class="c1"&gt;# remove all but leading spaces&lt;/span&gt;
&lt;span class="nv"&gt;var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;var&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$junk&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;   &lt;span class="c1"&gt;# remove leading spaces from original string&lt;/span&gt;

&lt;span class="nv"&gt;junk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;var&lt;/span&gt;&lt;span class="p"&gt;##*[! ]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;   &lt;span class="c1"&gt;# remove all but trailing spaces&lt;/span&gt;
&lt;span class="nv"&gt;var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;var&lt;/span&gt;&lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$junk&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;   &lt;span class="c1"&gt;# remove trailing spaces from original string&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The fish answer: Use &lt;cite&gt;string trim&lt;/cite&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic" start="73"&gt;
&lt;li&gt;&lt;p class="first"&gt;How can I use parameter expansion? How can I get substrings? How can I get a file without its extension, or get just a file's extension? What are some good ways to do basename and dirname?&lt;/p&gt;
&lt;p&gt;The bash answer: Use parameter expansion.&lt;/p&gt;
&lt;p&gt;The fish answer: Use &lt;cite&gt;string&lt;/cite&gt;. This also applies to FAQ 100, which explicitly asks for string manipulation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic" start="118"&gt;
&lt;li&gt;&lt;p class="first"&gt;How do I print the contents of an array in reverse order, or reverse an array?&lt;/p&gt;
&lt;p&gt;The bash answer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="p"&gt;!a[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; - &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; i &amp;gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; i-- &lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nv"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;[i]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="o"&gt;+=(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[j]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The fish answer: &lt;cite&gt;set b $a[-1..1]&lt;/cite&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, what have we learned here? Fish builds most of its scripting power on its builtins, not its syntax, and it has builtins made to solve actual problems that people have. &lt;cite&gt;math&lt;/cite&gt; does computations, &lt;cite&gt;string&lt;/cite&gt; does string-handling, &lt;cite&gt;argparse&lt;/cite&gt; parses args. Also &amp;quot;arrays&amp;quot; are nicer to work with because they're first-class instead of an afterthought &lt;a class="footnote-reference" href="#id18" id="id9"&gt;[9]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Overall I think we're doing okay.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;And we want to remove it.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id11" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;We standardized on calling it a &amp;quot;list&amp;quot; a while ago because that's a more normal english word, but it's the same idea.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id12" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;It's been a while, but I think it insists on splitting them into multiple lines with a backslash at the end of each? Which makes it not a valid number anymore for other tools, which means it's quite dangerous to use.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id13" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Seriously. &lt;cite&gt;echo &amp;quot;5 % 2&amp;quot; | bc -l&lt;/cite&gt; prints &amp;quot;0&amp;quot;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id14" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Based on the tinyexpr library, which we modified extensively.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id15" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id6"&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;That may not be installed - NetBSD doesn't have it.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id16" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id7"&gt;[7]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;And handles how many colors the terminal supports.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id17" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id8"&gt;[8]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Okay, technically these are SYSCONFDIR/fish/config.fish and $XDG_CONFIG_HOME/fish/config.fish.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id18" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id9"&gt;[9]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Because coming from POSIX sh, arrays &lt;em&gt;are&lt;/em&gt; an afterthought.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="fish"></category></entry><entry><title>What's in a prompt?</title><link href="https://bean.solutions/whats-in-a-prompt.html" rel="alternate"></link><published>2019-12-07T14:40:00+01:00</published><updated>2019-12-07T14:40:00+01:00</updated><author><name>Fabian Homborg</name></author><id>tag:bean.solutions,2019-12-07:/whats-in-a-prompt.html</id><summary type="html">&lt;p&gt;There's something weird about shell prompts. You'll see them described as &amp;quot;minimalist&amp;quot; or featureful, and you'll see them as multiline, single-line, monochrome or lit up like a christmas tree, but they'll all incorporate the same 10 or so bits of information:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The working directory - where the shell currently &amp;quot;is&amp;quot;&lt;/li&gt;
&lt;li&gt;The â€¦&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;There's something weird about shell prompts. You'll see them described as &amp;quot;minimalist&amp;quot; or featureful, and you'll see them as multiline, single-line, monochrome or lit up like a christmas tree, but they'll all incorporate the same 10 or so bits of information:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The working directory - where the shell currently &amp;quot;is&amp;quot;&lt;/li&gt;
&lt;li&gt;The prompt symbol - a &lt;cite&gt;$&lt;/cite&gt; or a &lt;cite&gt;#&lt;/cite&gt; or a &lt;cite&gt;&amp;gt;&lt;/cite&gt;, in fancier prompts a unicode symbol&lt;/li&gt;
&lt;li&gt;The last status - what the last program returned&lt;/li&gt;
&lt;li&gt;The current VCS status - what's the git branch?&lt;/li&gt;
&lt;li&gt;Any other &amp;quot;global tool state&amp;quot; - virtualenv, ruby env&lt;/li&gt;
&lt;li&gt;Vi-mode - if you use vi-style bindings, this is quite important &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;the time&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My own prompt also features a battery indicator and used to show the currently playing song in mpd, but those are unusual.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;So important in fact that fish automatically enables it for you.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="fish"></category></entry><entry><title>The best FAQ doesn't exist</title><link href="https://bean.solutions/the-best-faq-doesnt-exist.html" rel="alternate"></link><published>2019-07-16T20:20:00+02:00</published><updated>2019-07-16T20:20:00+02:00</updated><author><name>Fabian Homborg</name></author><id>tag:bean.solutions,2019-07-16:/the-best-faq-doesnt-exist.html</id><summary type="html">&lt;p&gt;In fish &amp;lt; 3.0, we've had a frequently asked question &lt;a class="footnote-reference" href="#id4" id="id1"&gt;[1]&lt;/a&gt; that adding bindings in your config.fish (the configuration file) didn't work.&lt;/p&gt;
&lt;p&gt;You see, fish doesn't use the common &amp;quot;readline&amp;quot; library, but has its own input/output facilities, and to bind keys you'd just execute a &lt;cite&gt;bind&lt;/cite&gt; command like â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;In fish &amp;lt; 3.0, we've had a frequently asked question &lt;a class="footnote-reference" href="#id4" id="id1"&gt;[1]&lt;/a&gt; that adding bindings in your config.fish (the configuration file) didn't work.&lt;/p&gt;
&lt;p&gt;You see, fish doesn't use the common &amp;quot;readline&amp;quot; library, but has its own input/output facilities, and to bind keys you'd just execute a &lt;cite&gt;bind&lt;/cite&gt; command like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="se"&gt;\c&lt;/span&gt;g forward-word
&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="se"&gt;\t&lt;/span&gt; &lt;span class="nb"&gt;complete&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that works if you're doing it interactively, so you like the binding and add it to your config file, and restart fish and... the bindings are gone?&lt;/p&gt;
&lt;p&gt;This was a pretty frequent question for us, and we'd always answer the same:&lt;/p&gt;
&lt;blockquote&gt;
You can't add bindings in config.fish, you'll have to add them to a function called &lt;cite&gt;fish_user_key_bindings&lt;/cite&gt;.&lt;/blockquote&gt;
&lt;p&gt;The reason for this was a pretty fundamental decision that:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We'd support an emacs-inspired &amp;quot;default&amp;quot; mode and a vi-inspired &amp;quot;vi&amp;quot; mode &lt;a class="footnote-reference" href="#id5" id="id2"&gt;[2]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Switching between the two would leave you with the same bindings every time&lt;/li&gt;
&lt;li&gt;Setting up the mode could be done by setting a variable, global or universal &lt;a class="footnote-reference" href="#id6" id="id3"&gt;[3]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because of all these, what we did was to load the bindings &lt;em&gt;after&lt;/em&gt; reading the config file (because the variable could be set there), and because of the second, we'd &lt;em&gt;erase&lt;/em&gt; all bindings whenever a binding mode was picked. The result was changes from the config file disappearing.&lt;/p&gt;
&lt;p&gt;Now, fixing this took me quite a while, and the fix turns out to be surprisingly elegant and simple:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;There are now &amp;quot;preset&amp;quot; and &amp;quot;user&amp;quot; bindings&lt;/li&gt;
&lt;li&gt;Modes set up their bindings as preset bindings&lt;/li&gt;
&lt;li&gt;Switching mode just erases the preset bindings&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That means if you tried out vi-mode and decide to go back, it just erases all the h/j/k/l and such bindings and leaves your custom stuff untouched.&lt;/p&gt;
&lt;p&gt;This has the further advantage that you can now decide to remove a custom binding and it'll leave the preset.&lt;/p&gt;
&lt;p&gt;But what's best about this is that I no longer have to answer the FAQ. It just simply stopped existing.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;That should have been an actual FAQ entry. Sorry!&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id5" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;And theoretically other modes, someone just has to write them.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Universal variables are persistently stored variables - fish saves them to disk, and shares them among the running sessions.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="fish"></category></entry><entry><title>Cool stuff in fish 3.1</title><link href="https://bean.solutions/cool-stuff-in-fish-31.html" rel="alternate"></link><published>2019-06-29T20:20:00+02:00</published><updated>2019-06-29T20:20:00+02:00</updated><author><name>Fabian Homborg</name></author><id>tag:bean.solutions,2019-06-29:/cool-stuff-in-fish-31.html</id><summary type="html">&lt;p&gt;We're at that point in the release cycle where it's taking shape, and we're slowly thinking about maybe releasing. We don't have a set release schedule or anything, and there's quite some stabilization to be done, but we know most of what will be in the release, so now seems â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;We're at that point in the release cycle where it's taking shape, and we're slowly thinking about maybe releasing. We don't have a set release schedule or anything, and there's quite some stabilization to be done, but we know most of what will be in the release, so now seems like a good time to talk about it.&lt;/p&gt;
&lt;p&gt;So here's some of my favorite things about the next fish release:&lt;/p&gt;
&lt;div class="section" id="no-more-buffering-in-some-cases"&gt;
&lt;h2&gt;No more buffering (in some cases)&lt;/h2&gt;
&lt;p&gt;Fish has a long-standing issue, in that it fully buffers the output of all builtins and functions.&lt;/p&gt;
&lt;p&gt;That means that, for instance, something like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat largefile &lt;span class="o"&gt;|&lt;/span&gt; grep something
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;would only show the output once everything was processed (because fish ships a default &lt;cite&gt;grep --color=auto&lt;/cite&gt; &amp;quot;alias&amp;quot; &lt;a class="footnote-reference" href="#id9" id="id1"&gt;[1]&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In 3.1, this restriction was relaxed for the last process in a pipeline, so the above won't buffer anymore. This makes some things much faster, and even allows functions to read indefinite output - &lt;cite&gt;ip monitor | grep&lt;/cite&gt; would appear to hang before.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nicer-error-messages"&gt;
&lt;h2&gt;Nicer error messages&lt;/h2&gt;
&lt;p&gt;Our builtins were a bit... chatty, when it came to errors.&lt;/p&gt;
&lt;img alt="An old error, showing a massive stack trace and a usage summary" src="../img/cd-error-old.png" style="height: 300px;" /&gt;
&lt;img alt="The same error in the new version, with the stack trace slimmed down and the usage summary removed" src="../img/cd-error-new.png" style="height: 200px;" /&gt;
&lt;p&gt;&lt;a class="footnote-reference" href="#id10" id="id2"&gt;[2]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also &lt;cite&gt;test&lt;/cite&gt; now shows a stack trace on error, making it actually possible to find where the error occured. This is especially important because &lt;cite&gt;test&lt;/cite&gt; has some sharp edges.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;argparse&lt;/cite&gt;'s error messages now use the current function name by default, so it's often unnecessary to explicitly give a name. Since argparse parses arg(ument)s, its errors are errors of the &amp;quot;program&amp;quot; or function it parses them for, so this seemed like the right thing to do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="brace-expansion-doesn-t-trigger-unless-necessary"&gt;
&lt;h2&gt;Brace expansion doesn't trigger unless necessary&lt;/h2&gt;
&lt;p&gt;One of my favorite things is making FAQs obsolete.&lt;/p&gt;
&lt;p&gt;A question we frequently get &lt;a class="footnote-reference" href="#id11" id="id3"&gt;[3]&lt;/a&gt; is why &lt;cite&gt;git reset HEAD&amp;#64;{0}&lt;/cite&gt; isn't working. The reason for that is that fish, unlike e.g. bash, interpreted the &lt;cite&gt;{0}&lt;/cite&gt; as a brace expansion &lt;a class="footnote-reference" href="#id12" id="id4"&gt;[4]&lt;/a&gt; with one element, so it expanded to &lt;cite&gt;git reset HEAD&amp;#64;0&lt;/cite&gt;, and git wouldn't take that.&lt;/p&gt;
&lt;p&gt;Instead, we now only interpret braces as triggering brace expansion if there is a &amp;quot;,&amp;quot; (i.e. more than one element) or a variable expansion (possibly more than one element). So git works as expected, any useful brace expansion continues working.&lt;/p&gt;
&lt;p&gt;This is, strictly speaking, backwards-incompatible. We still allow it because it's very unlikely to be a problem in practice, because the old syntax was useless &lt;a class="footnote-reference" href="#id13" id="id5"&gt;[5]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-builtin-niceties"&gt;
&lt;h2&gt;Some builtin niceties&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;cite&gt;-q&lt;/cite&gt; now means &amp;quot;query&amp;quot; across the board for all &amp;quot;does this kind of thing exist&amp;quot; builtins - whether it's &lt;cite&gt;command&lt;/cite&gt;, &lt;cite&gt;functions&lt;/cite&gt;, &lt;cite&gt;builtin&lt;/cite&gt; or &lt;cite&gt;type&lt;/cite&gt;.&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;complete -C foo&lt;/cite&gt; works instead of requiring &lt;cite&gt;complete -Cfoo&lt;/cite&gt;.&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;math&lt;/cite&gt; now allows &amp;quot;x&amp;quot; for multiplication. This is useful because &lt;cite&gt;math&lt;/cite&gt; is an ordinary builtin, so &lt;cite&gt;*&lt;/cite&gt; would be expanded. &lt;cite&gt;math 5 x 2&lt;/cite&gt; is nicer to type than &lt;cite&gt;math '5 * 2'&lt;/cite&gt;.&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;count&lt;/cite&gt; will now also read from stdin - &lt;cite&gt;count &amp;lt;/etc/hosts&lt;/cite&gt; now works.&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;argparse&lt;/cite&gt; gained a new &lt;cite&gt;--ignore-unknown&lt;/cite&gt; option so you can parse the arguments in multiple stages (or, in completions, ignore options you don't care about).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="nicer-semicolon-handling-in-fish-indent"&gt;
&lt;h2&gt;Nicer semicolon handling in fish_indent&lt;/h2&gt;
&lt;p&gt;&lt;cite&gt;fish_indent&lt;/cite&gt;, our autoformatter for fish scripts, will now turn most semicolons into line breaks.&lt;/p&gt;
&lt;p&gt;So&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;echo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;becomes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;echo&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The exception is &lt;cite&gt;and&lt;/cite&gt; and &lt;cite&gt;or&lt;/cite&gt;, because we are okay with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;foo&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and don't really want&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;
&lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So in this case, it will just keep whatever is there, whether that's line breaks or semicolons.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unicode-version-autodetection"&gt;
&lt;h2&gt;Unicode version autodetection&lt;/h2&gt;
&lt;p&gt;Because fish does a bunch of cursor movement (for suggestions and syntax highlighting), it needs to know the width of characters. Even worse, it needs to know what width the terminal thinks the characters are. This mostly works &lt;a class="footnote-reference" href="#id14" id="id6"&gt;[6]&lt;/a&gt;, only plenty of characters &lt;em&gt;changed&lt;/em&gt; width in Unicode 9, so we need to know if the current system understands Unicode 9 &lt;a class="footnote-reference" href="#id15" id="id7"&gt;[7]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So what we actually do is ask the system for the width of &lt;cite&gt;ðŸ˜ƒ&lt;/cite&gt;. If it says 2, we think it's Unicode 9-capable. If it says anything else, we guess it doesn't.&lt;/p&gt;
&lt;p&gt;There are some other unicode improvements, including for variation selectors and korean characters &lt;a class="footnote-reference" href="#id16" id="id8"&gt;[8]&lt;/a&gt;.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id9" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Remember, fish emulates aliases via functions.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;If I made this comparison with &lt;cite&gt;string&lt;/cite&gt; instead of &lt;cite&gt;cd&lt;/cite&gt;, the old error wouldn't fit on the screen.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id11" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;But didn't mention in the FAQ because we forgot to add it.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id12" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The &lt;cite&gt;/usr/{s,}bin&lt;/cite&gt; stuff.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id13" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;We have already changed what &lt;cite&gt;{}&lt;/cite&gt; means in 3.0 - before it was a zero-element brace expansion, which means it would always be removed entirely.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id14" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id6"&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;It's the bain of my existence.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id15" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id7"&gt;[7]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Ubuntu 16.04, which is still supported, doesn't.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id16" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id8"&gt;[8]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Both of which break a core assumption of our code - that the width of each codepoint is independent. Variation selectors change the width of what they are attached to, and korean &amp;quot;characters&amp;quot; are composed of three parts, each of which their own codepoint. Truly solving this requires a major rearchitecture, so we hack around it for now.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="fish"></category></entry><entry><title>Sometimes, support tools can delight</title><link href="https://bean.solutions/sometimes-support-tools-can-delight.html" rel="alternate"></link><published>2019-06-28T19:20:00+02:00</published><updated>2019-06-28T19:20:00+02:00</updated><author><name>Fabian Homborg</name></author><id>tag:bean.solutions,2019-06-28:/sometimes-support-tools-can-delight.html</id><summary type="html">&lt;p&gt;What's this blogging thing all about? Lemme check!&lt;/p&gt;
&lt;p&gt;So, there's a recent addition to &lt;a class="reference external" href="https://fishshell.com"&gt;fish&lt;/a&gt; that I really like. It's called &amp;quot;littlecheck&amp;quot;, and it's a new test driver &lt;a class="footnote-reference" href="#id9" id="id1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, test drivers are unlikely to ever really receive praise (or even be mentioned at all in most contexts), but they're â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;What's this blogging thing all about? Lemme check!&lt;/p&gt;
&lt;p&gt;So, there's a recent addition to &lt;a class="reference external" href="https://fishshell.com"&gt;fish&lt;/a&gt; that I really like. It's called &amp;quot;littlecheck&amp;quot;, and it's a new test driver &lt;a class="footnote-reference" href="#id9" id="id1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, test drivers are unlikely to ever really receive praise (or even be mentioned at all in most contexts), but they're surprisingly impactful. A bad test driver will leave you scratching your head if you have a failure, or will introduce friction to adding tests, which will make people not add tests.&lt;/p&gt;
&lt;p&gt;For example, in our previous driver, each test consisted of three files:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;test.in, the file to actually run.&lt;/li&gt;
&lt;li&gt;test.out - the stdout of running test.in&lt;/li&gt;
&lt;li&gt;test.err - the stderr&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Which had a few problems:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;To create a new test, you need to create 3 files.&lt;/li&gt;
&lt;li&gt;To figure out where a test failed, you need to follow 3 files at the same time&lt;/li&gt;
&lt;li&gt;The &amp;quot;.in&amp;quot; is a fish script, but it can't be called &amp;quot;.fish&amp;quot; for internal reasons &lt;a class="footnote-reference" href="#id10" id="id2"&gt;[2]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The replacement looks a little something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;#RUN: %fish %s&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; banana
&lt;span class="c"&gt;#CHECK: banana&lt;/span&gt;
date +%Y
&lt;span class="c"&gt;#CHECK: 20{{\d+}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which immediately solves all the above issues (the files are indeed called &amp;quot;something.fish&amp;quot; &lt;a class="footnote-reference" href="#id11" id="id3"&gt;[3]&lt;/a&gt;), but also some I haven't even talked about yet.&lt;/p&gt;
&lt;p&gt;See, we had an odd bug where redirecting to a directory (&lt;tt class="docutils literal"&gt;echo something &amp;gt; /directory/&lt;/tt&gt;) didn't immediately fail. That's certainly something you'd like to test, and we did for quite a while. We just tested that redirecting to &lt;cite&gt;.&lt;/cite&gt; failed with an error, and that was that. One file for the command, one file for the error and one file just because.&lt;/p&gt;
&lt;p&gt;Fast forward 5 years to this January, when I was working on getting test suite to succeed on Solaris &lt;a class="footnote-reference" href="#id12" id="id4"&gt;[4]&lt;/a&gt;. As it turns out Solaris also prints an error, but a different one (instead of &amp;quot;Is a directory&amp;quot; EISDIR you'd get &amp;quot;Invalid argument&amp;quot; EINVAL). The old test driver had no way to express this, and the error couldn't be redirected (because it's a syntax error), so this required us to disable the test. &lt;a class="footnote-reference" href="#id13" id="id5"&gt;[5]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Then we got another test driver (yes, that's two in parallel), which ran &amp;quot;invocation tests&amp;quot;, which checked how fish behaved when calling the binary with options. This was enough of an indirection that we managed to wedge in a way to use different test output depending on &lt;cite&gt;uname&lt;/cite&gt;, so it worked again. But this required:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A second test driver&lt;/li&gt;
&lt;li&gt;Checking operating system based on _name_, not feature testing. Using &lt;cite&gt;uname&lt;/cite&gt; should be avoided if at all possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So what does littlecheck do here? See that &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;{{\d+}}&lt;/span&gt;&lt;/tt&gt; above? That's an embedded regex that matches any string of digits, meaning that &lt;tt class="docutils literal"&gt;date&lt;/tt&gt; test will succeed as long as it's run in this century, or in about 18000 years &lt;a class="footnote-reference" href="#id14" id="id6"&gt;[6]&lt;/a&gt;. Or, alternatively, you could use it for something useful like this actual test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;#RUN: %fish %s&lt;/span&gt;
&lt;span class="k"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; . &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;status&lt;/span&gt; -b&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;status -b returned true after bad redirect on a begin block&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# Note that we sometimes get fancy quotation marks here, so let&amp;#39;s match three characters&lt;/span&gt;
&lt;span class="c"&gt;#CHECKERR: &amp;lt;W&amp;gt; fish: An error occurred while redirecting file {{...}}&lt;/span&gt;
&lt;span class="c"&gt;#CHECKERR: {{open: Is a directory|open: Invalid argument}}&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$status&lt;/span&gt;
&lt;span class="c"&gt;#CHECK: 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So you just embed the possibilities in a regex, and it'll just allow both. &lt;a class="footnote-reference" href="#id15" id="id7"&gt;[7]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hopefully you'll see why I really like this (thanks ridiculousfish!), and I haven't even mentioned the cherries on top:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It's entirely fish-agnostic - this can run any scripting language (that uses &lt;cite&gt;#&lt;/cite&gt; as a comment character)&lt;/li&gt;
&lt;li&gt;It's one single python file, no further dependencies&lt;/li&gt;
&lt;li&gt;It's public domain &lt;a class="footnote-reference" href="#id16" id="id8"&gt;[8]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Littlecheck is available at &lt;a class="reference external" href="https://github.com/ridiculousfish/littlecheck"&gt;https://github.com/ridiculousfish/littlecheck&lt;/a&gt;. I kinda love it right now.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id9" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I define &amp;quot;test driver&amp;quot; as &amp;quot;thing that runs the tests&amp;quot;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;We glob, and they are in the same directory as the main &amp;quot;test.fish&amp;quot; orchestration script. I didn't say it was a good reason!&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id11" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Which makes text editors highlight them as fish scripts, which makes me happy.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id12" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Or Illumos, or OpenIndiana? I still don't get the nomenclature.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id13" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Alternatively, we could have caught the error and swapped it for the other one. But that would require behavioral changes, and it's not clear that every EINVAL is because of a directory, so we'd have to figure that out or just use the more generic error everywhere.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id14" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id6"&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;It's not an actual test we use.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id15" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id7"&gt;[7]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;For astute readers, there's another thing this allows, which required us to disable even the invocation tests.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id16" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id8"&gt;[8]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;My thoughts on licensing are a tad more complex, but in short I believe for a simple thing like this you want it to be drop-in-and-forget.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="fish"></category></entry></feed>