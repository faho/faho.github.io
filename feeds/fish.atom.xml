<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Fabian's Footnotes - fish</title><link href="https://faho.github.io/" rel="alternate"></link><link href="https://faho.github.io/feeds/fish.atom.xml" rel="self"></link><id>https://faho.github.io/</id><updated>2019-06-29T20:20:00+02:00</updated><entry><title>Cool stuff in fish 3.1</title><link href="https://faho.github.io/cool-stuff-in-fish-31.html" rel="alternate"></link><published>2019-06-29T20:20:00+02:00</published><updated>2019-06-29T20:20:00+02:00</updated><author><name>Fabian Homborg</name></author><id>tag:faho.github.io,2019-06-29:/cool-stuff-in-fish-31.html</id><summary type="html">&lt;p&gt;We're at that point in the release cycle where it's taking shape, and we're slowly thinking about maybe releasing. We don't have a set release schedule or anything, and there's quite some stabilization to be done, but we know most of what will be in the release, so now seems â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;We're at that point in the release cycle where it's taking shape, and we're slowly thinking about maybe releasing. We don't have a set release schedule or anything, and there's quite some stabilization to be done, but we know most of what will be in the release, so now seems like a good time to talk about it.&lt;/p&gt;
&lt;p&gt;So here's some of my favorite things about the next fish release:&lt;/p&gt;
&lt;div class="section" id="no-more-buffering-in-some-cases"&gt;
&lt;h2&gt;No more buffering (in some cases)&lt;/h2&gt;
&lt;p&gt;Fish has a long-standing issue, in that it fully buffers the output of all builtins and functions.&lt;/p&gt;
&lt;p&gt;That means that, for instance, something like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat largefile &lt;span class="o"&gt;|&lt;/span&gt; grep something
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;would only show the output once everything was processed (because fish ships a default &lt;cite&gt;grep --color=auto&lt;/cite&gt; &amp;quot;alias&amp;quot; &lt;a class="footnote-reference" href="#id9" id="id1"&gt;[1]&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In 3.1, this restriction was relaxed for the last process in a pipeline, so the above won't buffer anymore. This makes some things much faster, and even allows functions to read indefinite output - &lt;cite&gt;ip monitor | grep&lt;/cite&gt; would appear to hang before.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nicer-error-messages"&gt;
&lt;h2&gt;Nicer error messages&lt;/h2&gt;
&lt;p&gt;Our builtins were a bit... chatty, when it came to errors.&lt;/p&gt;
&lt;img alt="An old error, showing a massive stack trace and a usage summary" src="../img/cd-error-old.png" style="height: 300px;" /&gt;
&lt;img alt="The same error in the new version, with the stack trace slimmed down and the usage summary removed" src="../img/cd-error-new.png" style="height: 200px;" /&gt;
&lt;p&gt;&lt;a class="footnote-reference" href="#id10" id="id2"&gt;[2]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also &lt;cite&gt;test&lt;/cite&gt; now shows a stack trace on error, making it actually possible to find where the error occured. This is especially important because &lt;cite&gt;test&lt;/cite&gt; has some sharp edges.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;argparse&lt;/cite&gt;'s error messages now use the current function name by default, so it's often unnecessary to explicitly give a name. Since argparse parses arg(ument)s, its errors are errors of the &amp;quot;program&amp;quot; or function it parses them for, so this seemed like the right thing to do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="brace-expansion-doesn-t-trigger-unless-necessary"&gt;
&lt;h2&gt;Brace expansion doesn't trigger unless necessary&lt;/h2&gt;
&lt;p&gt;One of my favorite things is making FAQs obsolete.&lt;/p&gt;
&lt;p&gt;A question we frequently get &lt;a class="footnote-reference" href="#id11" id="id3"&gt;[3]&lt;/a&gt; is why &lt;cite&gt;git reset HEAD&amp;#64;{0}&lt;/cite&gt; isn't working. The reason for that is that fish, unlike e.g. bash, interpreted the &lt;cite&gt;{0}&lt;/cite&gt; as a brace expansion &lt;a class="footnote-reference" href="#id12" id="id4"&gt;[4]&lt;/a&gt; with one element, so it expanded to &lt;cite&gt;git reset HEAD&amp;#64;0&lt;/cite&gt;, and git wouldn't take that.&lt;/p&gt;
&lt;p&gt;Instead, we now only interpret braces as triggering brace expansion if there is a &amp;quot;,&amp;quot; (i.e. more than one element) or a variable expansion (possibly more than one element). So git works as expected, any useful brace expansion continues working.&lt;/p&gt;
&lt;p&gt;This is, strictly speaking, backwards-incompatible. We still allow it because it's very unlikely to be a problem in practice, because the old syntax was useless &lt;a class="footnote-reference" href="#id13" id="id5"&gt;[5]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-builtin-niceties"&gt;
&lt;h2&gt;Some builtin niceties&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;cite&gt;-q&lt;/cite&gt; now means &amp;quot;query&amp;quot; across the board for all &amp;quot;does this kind of thing exist&amp;quot; builtins - whether it's &lt;cite&gt;command&lt;/cite&gt;, &lt;cite&gt;functions&lt;/cite&gt;, &lt;cite&gt;builtin&lt;/cite&gt; or &lt;cite&gt;type&lt;/cite&gt;.&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;complete -C foo&lt;/cite&gt; works instead of requiring &lt;cite&gt;complete -Cfoo&lt;/cite&gt;.&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;math&lt;/cite&gt; now allows &amp;quot;x&amp;quot; for multiplication. This is useful because &lt;cite&gt;math&lt;/cite&gt; is an ordinary builtin, so &lt;cite&gt;*&lt;/cite&gt; would be expanded. &lt;cite&gt;math 5 x 2&lt;/cite&gt; is nicer to type than &lt;cite&gt;math '5 * 2'&lt;/cite&gt;.&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;count&lt;/cite&gt; will now also read from stdin - &lt;cite&gt;count &amp;lt;/etc/hosts&lt;/cite&gt; now works.&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;argparse&lt;/cite&gt; gained a new &lt;cite&gt;--ignore-unknown&lt;/cite&gt; option so you can parse the arguments in multiple stages (or, in completions, ignore options you don't care about).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="nicer-semicolon-handling-in-fish-indent"&gt;
&lt;h2&gt;Nicer semicolon handling in fish_indent&lt;/h2&gt;
&lt;p&gt;&lt;cite&gt;fish_indent&lt;/cite&gt;, our autoformatter for fish scripts, will now turn most semicolons into line breaks.&lt;/p&gt;
&lt;p&gt;So&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;echo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;becomes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;echo&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The exception is &lt;cite&gt;and&lt;/cite&gt; and &lt;cite&gt;or&lt;/cite&gt;, because we are okay with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;foo&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and don't really want&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;
&lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So in this case, it will just keep whatever is there, whether that's line breaks or semicolons.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unicode-version-autodetection"&gt;
&lt;h2&gt;Unicode version autodetection&lt;/h2&gt;
&lt;p&gt;Because fish does a bunch of cursor movement (for suggestions and syntax highlighting), it needs to know the width of characters. Even worse, it needs to know what width the terminal thinks the characters are. This mostly works &lt;a class="footnote-reference" href="#id14" id="id6"&gt;[6]&lt;/a&gt;, only plenty of characters &lt;em&gt;changed&lt;/em&gt; width in Unicode 9, so we need to know if the current system understands Unicode 9 &lt;a class="footnote-reference" href="#id15" id="id7"&gt;[7]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So what we actually do is ask the system for the width of &lt;cite&gt;ðŸ˜ƒ&lt;/cite&gt;. If it says 2, we think it's Unicode 9-capable. If it says anything else, we guess it doesn't.&lt;/p&gt;
&lt;p&gt;There are some other unicode improvements, including for variation selectors and korean characters &lt;a class="footnote-reference" href="#id16" id="id8"&gt;[8]&lt;/a&gt;.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id9" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Remember, fish emulates aliases via functions.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;If I made this comparison with &lt;cite&gt;string&lt;/cite&gt; instead of &lt;cite&gt;cd&lt;/cite&gt;, the old error wouldn't fit on the screen.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id11" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;But didn't mention in the FAQ because we forgot to add it.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id12" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The &lt;cite&gt;/usr/{s,}bin&lt;/cite&gt; stuff.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id13" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;We have already changed what &lt;cite&gt;{}&lt;/cite&gt; means in 3.0 - before it was a zero-element brace expansion, which means it would always be removed entirely.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id14" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id6"&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;It's the bain of my existence.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id15" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id7"&gt;[7]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Ubuntu 16.04, which is still supported, doesn't.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id16" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id8"&gt;[8]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Both of which break a core assumption of our code - that the width of each codepoint is independent. Variation selectors change the width of what they are attached to, and korean &amp;quot;characters&amp;quot; are composed of three parts, each of which their own codepoint. Truly solving this requires a major rearchitecture, so we hack around it for now.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content></entry><entry><title>Sometimes, support tools can delight</title><link href="https://faho.github.io/sometimes-support-tools-can-delight.html" rel="alternate"></link><published>2019-06-28T19:20:00+02:00</published><updated>2019-06-28T19:20:00+02:00</updated><author><name>Fabian Homborg</name></author><id>tag:faho.github.io,2019-06-28:/sometimes-support-tools-can-delight.html</id><summary type="html">&lt;p&gt;What's this blogging thing all about? Lemme check!&lt;/p&gt;
&lt;p&gt;So, there's a recent addition to &lt;a class="reference external" href="https://fishshell.com"&gt;fish&lt;/a&gt; that I really like. It's called &amp;quot;littlecheck&amp;quot;, and it's a new test driver &lt;a class="footnote-reference" href="#id9" id="id1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, test drivers are unlikely to ever really receive praise (or even be mentioned at all in most contexts), but they're â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;What's this blogging thing all about? Lemme check!&lt;/p&gt;
&lt;p&gt;So, there's a recent addition to &lt;a class="reference external" href="https://fishshell.com"&gt;fish&lt;/a&gt; that I really like. It's called &amp;quot;littlecheck&amp;quot;, and it's a new test driver &lt;a class="footnote-reference" href="#id9" id="id1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, test drivers are unlikely to ever really receive praise (or even be mentioned at all in most contexts), but they're surprisingly impactful. A bad test driver will leave you scratching your head if you have a failure, or will introduce friction to adding tests, which will make people not add tests.&lt;/p&gt;
&lt;p&gt;For example, in our previous driver, each test consisted of three files:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;test.in, the file to actually run.&lt;/li&gt;
&lt;li&gt;test.out - the stdout of running test.in&lt;/li&gt;
&lt;li&gt;test.err - the stderr&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Which had a few problems:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;To create a new test, you need to create 3 files.&lt;/li&gt;
&lt;li&gt;To figure out where a test failed, you need to follow 3 files at the same time&lt;/li&gt;
&lt;li&gt;The &amp;quot;.in&amp;quot; is a fish script, but it can't be called &amp;quot;.fish&amp;quot; for internal reasons &lt;a class="footnote-reference" href="#id10" id="id2"&gt;[2]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The replacement looks a little something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;#RUN: %fish %s&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; banana
&lt;span class="c"&gt;#CHECK: banana&lt;/span&gt;
date +%Y
&lt;span class="c"&gt;#CHECK: 20{{\d+}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which immediately solves all the above issues (the files are indeed called &amp;quot;something.fish&amp;quot; &lt;a class="footnote-reference" href="#id11" id="id3"&gt;[3]&lt;/a&gt;), but also some I haven't even talked about yet.&lt;/p&gt;
&lt;p&gt;See, we had an odd bug where redirecting to a directory (&lt;tt class="docutils literal"&gt;echo something &amp;gt; /directory/&lt;/tt&gt;) didn't immediately fail. That's certainly something you'd like to test, and we did for quite a while. We just tested that redirecting to &lt;cite&gt;.&lt;/cite&gt; failed with an error, and that was that. One file for the command, one file for the error and one file just because.&lt;/p&gt;
&lt;p&gt;Fast forward 5 years to this January, when I was working on getting test suite to succeed on Solaris &lt;a class="footnote-reference" href="#id12" id="id4"&gt;[4]&lt;/a&gt;. As it turns out Solaris also prints an error, but a different one (instead of &amp;quot;Is a directory&amp;quot; EISDIR you'd get &amp;quot;Invalid argument&amp;quot; EINVAL). The old test driver had no way to express this, and the error couldn't be redirected (because it's a syntax error), so this required us to disable the test. &lt;a class="footnote-reference" href="#id13" id="id5"&gt;[5]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Then we got another test driver (yes, that's two in parallel), which ran &amp;quot;invocation tests&amp;quot;, which checked how fish behaved when calling the binary with options. This was enough of an indirection that we managed to wedge in a way to use different test output depending on &lt;cite&gt;uname&lt;/cite&gt;, so it worked again. But this required:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A second test driver&lt;/li&gt;
&lt;li&gt;Checking operating system based on _name_, not feature testing. Using &lt;cite&gt;uname&lt;/cite&gt; should be avoided if at all possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So what does littlecheck do here? See that &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;{{\d+}}&lt;/span&gt;&lt;/tt&gt; above? That's an embedded regex that matches any string of digits, meaning that &lt;tt class="docutils literal"&gt;date&lt;/tt&gt; test will succeed as long as it's run in this century, or in about 18000 years &lt;a class="footnote-reference" href="#id14" id="id6"&gt;[6]&lt;/a&gt;. Or, alternatively, you could use it for something useful like this actual test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;#RUN: %fish %s&lt;/span&gt;
&lt;span class="k"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; . &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;status&lt;/span&gt; -b&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;status -b returned true after bad redirect on a begin block&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# Note that we sometimes get fancy quotation marks here, so let&amp;#39;s match three characters&lt;/span&gt;
&lt;span class="c"&gt;#CHECKERR: &amp;lt;W&amp;gt; fish: An error occurred while redirecting file {{...}}&lt;/span&gt;
&lt;span class="c"&gt;#CHECKERR: {{open: Is a directory|open: Invalid argument}}&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$status&lt;/span&gt;
&lt;span class="c"&gt;#CHECK: 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So you just embed the possibilities in a regex, and it'll just allow both. &lt;a class="footnote-reference" href="#id15" id="id7"&gt;[7]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hopefully you'll see why I really like this (thanks ridiculousfish!), and I haven't even mentioned the cherries on top:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It's entirely fish-agnostic - this can run any scripting language (that uses &lt;cite&gt;#&lt;/cite&gt; as a comment character)&lt;/li&gt;
&lt;li&gt;It's one single python file, no further dependencies&lt;/li&gt;
&lt;li&gt;It's public domain &lt;a class="footnote-reference" href="#id16" id="id8"&gt;[8]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Littlecheck is available at &lt;a class="reference external" href="https://github.com/ridiculousfish/littlecheck"&gt;https://github.com/ridiculousfish/littlecheck&lt;/a&gt;. I kinda love it right now.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id9" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I define &amp;quot;test driver&amp;quot; as &amp;quot;thing that runs the tests&amp;quot;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;We glob, and they are in the same directory as the main &amp;quot;test.fish&amp;quot; orchestration script. I didn't say it was a good reason!&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id11" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Which makes text editors highlight them as fish scripts, which makes me happy.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id12" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Or Illumos, or OpenIndiana? I still don't get the nomenclature.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id13" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Alternatively, we could have caught the error and swapped it for the other one. But that would require behavioral changes, and it's not clear that every EINVAL is because of a directory, so we'd have to figure that out or just use the more generic error everywhere.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id14" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id6"&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;It's not an actual test we use.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id15" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id7"&gt;[7]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;For astute readers, there's another thing this allows, which required us to disable even the invocation tests.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id16" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id8"&gt;[8]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;My thoughts on licensing are a tad more complex, but in short I believe for a simple thing like this you want it to be drop-in-and-forget.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content></entry></feed>