<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Fabian's Footnotes - fish</title><link href="https://faho.github.io/" rel="alternate"></link><link href="https://faho.github.io/feeds/fish.atom.xml" rel="self"></link><id>https://faho.github.io/</id><updated>2019-12-07T14:40:00+01:00</updated><entry><title>BashFAQ through fish's eyes</title><link href="https://faho.github.io/bashfaq-through-fishs-eyes.html" rel="alternate"></link><published>2019-12-07T14:40:00+01:00</published><updated>2019-12-07T14:40:00+01:00</updated><author><name>Fabian Homborg</name></author><id>tag:faho.github.io,2019-12-07:/bashfaq-through-fishs-eyes.html</id><summary type="html">&lt;p&gt;So here's one thing I wanted to do for a while. Let's look at the &lt;a class="reference external" href="http://mywiki.wooledge.org/BashFAQ"&gt;BashFAQ&lt;/a&gt; and see how it holds up in fish.&lt;/p&gt;
&lt;p&gt;This is not a comprehensive comparison (in particular the BashFAQ is by its nature something of a list of bash's most obvious problems, which leaves fish's â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;So here's one thing I wanted to do for a while. Let's look at the &lt;a class="reference external" href="http://mywiki.wooledge.org/BashFAQ"&gt;BashFAQ&lt;/a&gt; and see how it holds up in fish.&lt;/p&gt;
&lt;p&gt;This is not a comprehensive comparison (in particular the BashFAQ is by its nature something of a list of bash's most obvious problems, which leaves fish's most obvious problems out) and I'm going to skip over uninteresting questions (including those that are substantially similar in both and those that deal with certain commands). Since much of this is down to Bash following POSIX most of the bash answers apply to e.g. dash and zsh as well.&lt;/p&gt;
&lt;p&gt;This isn't meant to bash (hehehe) bash, but more of an explanation of why we're bothering with our own scripting language at all. One of the most common comments whenever fish is discussed is &amp;quot;well, it's not POSIX compatible&amp;quot;, so this is, in part, an attempt to show &lt;em&gt;why&lt;/em&gt;.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;How can I read a file (data stream, variable) line-by-line (and/or field-by-field)?&lt;/p&gt;
&lt;p&gt;The bash answer: Don't try to use &amp;quot;for&amp;quot;. Use a while loop and the read command (specifically &lt;cite&gt;read -r&lt;/cite&gt; with IFS unset)&lt;/p&gt;
&lt;p&gt;The fish answer: A for-loop is fine (&lt;cite&gt;for line in (cat file)&lt;/cite&gt;), as is &lt;cite&gt;while read line&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;Fish doesn't do word-splitting the way bash does - it splits command substitutions on newlines, and while &lt;cite&gt;read&lt;/cite&gt; obeys $IFS it is the only part of fish to do so &lt;a class="footnote-reference" href="#id10" id="id1"&gt;[1]&lt;/a&gt; so $IFS isn't typically changed. If you want to be super-pedantic set $IFS to &lt;cite&gt;nt&lt;/cite&gt; before doing anything.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic" start="4"&gt;
&lt;li&gt;&lt;p class="first"&gt;How can I check whether a directory is empty or not? How do I check for any .mpg files, or count how many there are?&lt;/p&gt;
&lt;p&gt;The bash answer: Set nullglob, dotglob and an array. Possibly use subshells.&lt;/p&gt;
&lt;p&gt;The fish answer: Use &lt;cite&gt;count * .*&lt;/cite&gt;. Fish uses nullglob behavior for that, and doesn't have dotglob.&lt;/p&gt;
&lt;p&gt;The nice part here is that the answer is &lt;em&gt;always&lt;/em&gt; valid, and that you don't have to remember to set an option, possibly, if you haven't already set it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;How can I use array variables?&lt;/p&gt;
&lt;p&gt;The fish answer: Use &lt;cite&gt;set&lt;/cite&gt; to set/erase an &amp;quot;array&amp;quot; &lt;a class="footnote-reference" href="#id11" id="id2"&gt;[2]&lt;/a&gt; or any of its elements, use &lt;cite&gt;$var&lt;/cite&gt; to expand it fully and &lt;cite&gt;$var[slice]&lt;/cite&gt; to expand some of its elements (including &lt;cite&gt;$var[1..3 7..-2]&lt;/cite&gt;). Overall fish defaults to lists as first-class things, while bash added them onto POSIXoid syntax, so it needs to do a bunch of contortions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic" start="7"&gt;
&lt;li&gt;&lt;p class="first"&gt;Is there a function to return the length of a string?&lt;/p&gt;
&lt;p&gt;The bash answer: &lt;cite&gt;${#varname}&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;The fish answer: &lt;cite&gt;string length -q -- $varname&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;This is simply a case where fish prefers to use commands, while bash prefers syntax.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic" start="20"&gt;
&lt;li&gt;&lt;p class="first"&gt;How can I find and safely handle file names containing newlines, spaces or both?&lt;/p&gt;
&lt;p&gt;The bash answer: Complicated. Quote, use &lt;cite&gt;--&lt;/cite&gt;, use globs or &lt;cite&gt;find -print0&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;The fish anwer: Fish doesn't do word-splitting on variables and only splits command substitutions on newline, so you don't have to worry about spaces at all (apart from quoting them in literal arguments). Bash's &lt;cite&gt;read&lt;/cite&gt; also features a &lt;cite&gt;-d&lt;/cite&gt; option that can be passed a NULL as a delimiter via &lt;cite&gt;$'0'&lt;/cite&gt;. In fish you'd use &lt;cite&gt;read -z&lt;/cite&gt;. Also since fish doesn't put while-loops into subshells you can set variables inside them. Also since fish 3.0 &lt;cite&gt;string split0&lt;/cite&gt; is available to split an entire command substitution on NULLs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; file &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;find . -print0 &lt;span class="o"&gt;|&lt;/span&gt; string split0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;works.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic" start="22"&gt;
&lt;li&gt;&lt;p class="first"&gt;How can I calculate with floating point numbers instead of just integers?&lt;/p&gt;
&lt;p&gt;The bash answer: Bash's arithmetic does ints only, use &lt;cite&gt;bc&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;The fish answer, since fish 3.0: Use &lt;cite&gt;math&lt;/cite&gt;, and &lt;cite&gt;test&lt;/cite&gt; even for floating comparisons. Fish's &lt;cite&gt;math&lt;/cite&gt; used to be a function that called &lt;cite&gt;bc&lt;/cite&gt; in the background, but &lt;cite&gt;bc&lt;/cite&gt; has some major issues. For one macOS (being the paragon of current software that it is) ships a slightly-outdated version of bc that has problems with large results &lt;a class="footnote-reference" href="#id12" id="id3"&gt;[3]&lt;/a&gt; and bc can't do modulo and floats at the same time &lt;a class="footnote-reference" href="#id13" id="id4"&gt;[4]&lt;/a&gt;. Also &lt;cite&gt;bc&lt;/cite&gt; does a heck of a lot of stuff and we can't document all of it so there's always this weird corner where we'd have to send people to external documentation. So we wrote our own &lt;cite&gt;math&lt;/cite&gt; &lt;a class="footnote-reference" href="#id14" id="id5"&gt;[5]&lt;/a&gt;, and it should &lt;em&gt;just work&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic" start="24"&gt;
&lt;li&gt;&lt;p class="first"&gt;I set variables in a loop that's in a pipeline. Why do they disappear after the loop terminates? Or, why can't I pipe data to read?&lt;/p&gt;
&lt;p&gt;The bash answer: Subshells.&lt;/p&gt;
&lt;p&gt;The fish answer: They don't, unless you've scoped them to be local to the loop. Any variable defined with &lt;cite&gt;set -l&lt;/cite&gt; inside will disappear, but put that outside and &lt;cite&gt;set&lt;/cite&gt; it inside and it stays. No subshells here.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;How can I access positional parameters after $9?&lt;/p&gt;
&lt;p&gt;The bash answer: Use ${10} instead of $10. For other shells you might have to use &lt;cite&gt;shift&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;The fish answer: Use &lt;cite&gt;$argv[10]&lt;/cite&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic" start="35"&gt;
&lt;li&gt;&lt;p class="first"&gt;How can I handle command-line options and arguments in my script easily?&lt;/p&gt;
&lt;p&gt;The bash answer: Either manual parsing (&amp;quot;the most flexible approach, and is sufficient for most scripts. It is the best way, really&amp;quot;) or &lt;cite&gt;getopts&lt;/cite&gt;, never &lt;cite&gt;getopt&lt;/cite&gt; (because that doesn't do long options). The manual approach makes it hard to use grouped short options (like in &lt;cite&gt;ls -lah&lt;/cite&gt;).&lt;/p&gt;
&lt;p&gt;The fish answer: &lt;cite&gt;argparse&lt;/cite&gt;. This is one tool that was written explicitly as a reaction to questions about how to parse arguments.&lt;/p&gt;
&lt;p&gt;It's probably easiest to demonstrate with an example. So let's see how fish's &lt;cite&gt;abbr&lt;/cite&gt; function handles its arguments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; -l options --stop-nonopt --exclusive &lt;span class="s1"&gt;&amp;#39;a,r,e,l,s,q&amp;#39;&lt;/span&gt; --exclusive &lt;span class="s1"&gt;&amp;#39;g,U&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; -a options h/help a/add r/rename e/erase l/list s/show q/query
&lt;span class="k"&gt;set&lt;/span&gt; -a options g/global U/universal

argparse -n abbr &lt;span class="nv"&gt;$options&lt;/span&gt; -- &lt;span class="nv"&gt;$argv&lt;/span&gt;
&lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; -q _flag_help
    __fish_print_help abbr
    &lt;span class="k"&gt;return&lt;/span&gt; 0
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you see, &lt;cite&gt;argparse&lt;/cite&gt; gets a list of options to handle (with long and short versions), and then the arguments to parse. It puts the found options into $_flag_XYZ variables and leaves the positional arguments in $argv.&lt;/p&gt;
&lt;p&gt;This takes care of all the option ungrouping, finding option parameters and such, and can even be used to disallow option combinations and require a minimum or maximum number of arguments.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic" start="37"&gt;
&lt;li&gt;&lt;p class="first"&gt;How can I print text in various colors?&lt;/p&gt;
&lt;p&gt;The bash answer: Use &lt;cite&gt;tput&lt;/cite&gt;, like &lt;cite&gt;blue=$(tput setaf 4)&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;The fish answer: Use &lt;cite&gt;set_color&lt;/cite&gt;. Of course &lt;cite&gt;tput&lt;/cite&gt; would also work, but it's a bit weird to require an external tool for this &lt;a class="footnote-reference" href="#id15" id="id6"&gt;[6]&lt;/a&gt;, &lt;cite&gt;set_color&lt;/cite&gt; can take RGB or named colors &lt;a class="footnote-reference" href="#id16" id="id7"&gt;[7]&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic" start="39"&gt;
&lt;li&gt;&lt;p class="first"&gt;What are all the dot-files that bash reads?&lt;/p&gt;
&lt;p&gt;The bash answer: Depends on whether your shell is interactive and/or a login shell. Sometimes there are multiple options (&amp;quot;/etc/profile and then one of .bash_profile or .bash_login or .profile&amp;quot;).&lt;/p&gt;
&lt;p&gt;The fish answer: /etc/fish/config.fish and ~/.config/fish/config.fish &lt;a class="footnote-reference" href="#id17" id="id8"&gt;[8]&lt;/a&gt;. Always. In an interactive shell, a login shell, on tuesdays, when it's raining outside and whether your system is Debian or Solaris.&lt;/p&gt;
&lt;p&gt;This is one point where I'd argue it's a bit of an over-simplification. It's obvious to me that login-shells aren't special or useful enough to deserve their own config file (in fish you can guard bits behind &lt;cite&gt;if status is-login&lt;/cite&gt; and that seems entirely enough to me), but I think reading config.fish in non-interactive shells causes issues if you're using it as a script interpreter (via &lt;cite&gt;#!/usr/bin/env fish&lt;/cite&gt;).&lt;/p&gt;
&lt;p&gt;So personally I'd prefer if we didn't read config.fish in that case, but I don't have an answer as to what we should then read. Bash would do well with some simplification however.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic" start="41"&gt;
&lt;li&gt;&lt;p class="first"&gt;How do I determine whether a variable contains a substring?&lt;/p&gt;
&lt;p&gt;The bash answer: Use &lt;cite&gt;if [[ $foo = *bar* ]]&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;The fish answer: You want to do something with strings? Use &lt;cite&gt;string&lt;/cite&gt;. Here &lt;cite&gt;string match -- '*bar*' $foo&lt;/cite&gt; would do.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic" start="46"&gt;
&lt;li&gt;&lt;p class="first"&gt;I want to check to see whether a word is in a list (or an element is a member of a set).&lt;/p&gt;
&lt;p&gt;The bash answer: Use associative arrays (bash &amp;gt;= 4) or for-loops.&lt;/p&gt;
&lt;p&gt;In this case the associative array seems to be used purely for performance reasons and doesn't actually simplify the code (because you still need to loop through the things to set the array).&lt;/p&gt;
&lt;p&gt;The fish answer: Use &lt;cite&gt;contains&lt;/cite&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;read &lt;/span&gt;input
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;contains&lt;/span&gt; -- &lt;span class="nv"&gt;$input&lt;/span&gt; Bigfoot UFOs Republicans
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$input&lt;/span&gt; exists
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$input&lt;/span&gt; does &lt;span class="k"&gt;not&lt;/span&gt; exist
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic" start="51"&gt;
&lt;li&gt;&lt;p class="first"&gt;I want history-search just like in tcsh. How can I bind it to the up and down keys?&lt;/p&gt;
&lt;p&gt;The bash answer: Just add the following to /etc/inputrc or your ~/.inputrc:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\e[A&amp;quot;&lt;/span&gt;:history-search-backward
&lt;span class="s2"&gt;&amp;quot;\e[B&amp;quot;&lt;/span&gt;:history-search-forward
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The fish answer: It's bound like that by default.&lt;/p&gt;
&lt;p&gt;This is one of the first things I add whenever I use bash anywhere. It baffles me why it's not the default.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic" start="66"&gt;
&lt;li&gt;&lt;p class="first"&gt;I want to check if [[ $var == foo || $var == bar || $var == more ]] without repeating $var n times.&lt;/p&gt;
&lt;p&gt;The bash answer: Use &lt;cite&gt;case&lt;/cite&gt; or extglobs.&lt;/p&gt;
&lt;p&gt;The fish answer: Use &lt;cite&gt;contains&lt;/cite&gt; or &lt;cite&gt;case&lt;/cite&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;How can I trim leading/trailing white space from one of my variables?&lt;/p&gt;
&lt;p&gt;The bash answer: Use extglobs or incantations like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;junk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;var&lt;/span&gt;&lt;span class="p"&gt;%%[! ]*&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;   &lt;span class="c1"&gt;# remove all but leading spaces&lt;/span&gt;
&lt;span class="nv"&gt;var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;var&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$junk&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;   &lt;span class="c1"&gt;# remove leading spaces from original string&lt;/span&gt;

&lt;span class="nv"&gt;junk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;var&lt;/span&gt;&lt;span class="p"&gt;##*[! ]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;   &lt;span class="c1"&gt;# remove all but trailing spaces&lt;/span&gt;
&lt;span class="nv"&gt;var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;var&lt;/span&gt;&lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$junk&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;   &lt;span class="c1"&gt;# remove trailing spaces from original string&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The fish answer: Use &lt;cite&gt;string trim&lt;/cite&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic" start="73"&gt;
&lt;li&gt;&lt;p class="first"&gt;How can I use parameter expansion? How can I get substrings? How can I get a file without its extension, or get just a file's extension? What are some good ways to do basename and dirname?&lt;/p&gt;
&lt;p&gt;The bash answer: Use parameter expansion.&lt;/p&gt;
&lt;p&gt;The fish answer: Use &lt;cite&gt;string&lt;/cite&gt;. This also applies to FAQ 100, which explicitly asks for string manipulation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic" start="118"&gt;
&lt;li&gt;&lt;p class="first"&gt;How do I print the contents of an array in reverse order, or reverse an array?&lt;/p&gt;
&lt;p&gt;The bash answer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="p"&gt;!a[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; - &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; i &amp;gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; i-- &lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nv"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;[i]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="o"&gt;+=(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[j]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The fish answer: &lt;cite&gt;set b $a[-1..1]&lt;/cite&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, what have we learned here? Fish builds most of its scripting power on its builtins, not its syntax, and it has builtins made to solve actual problems that people have. &lt;cite&gt;math&lt;/cite&gt; does computations, &lt;cite&gt;string&lt;/cite&gt; does string-handling, &lt;cite&gt;argparse&lt;/cite&gt; parses args. Also &amp;quot;arrays&amp;quot; are nicer to work with because they're first-class instead of an afterthought &lt;a class="footnote-reference" href="#id18" id="id9"&gt;[9]&lt;/a&gt;.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;And we want to remove it.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id11" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;We standardized on calling it a &amp;quot;list&amp;quot; a while ago because that's a more normal english word, but it's the same idea.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id12" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;It's been a while, but I think it insists on splitting them into multiple lines with a backslash at the end of each? Which makes it not a valid number anymore for other tools, which means it's quite dangerous to use.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id13" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Seriously. &lt;cite&gt;echo &amp;quot;5 % 2&amp;quot; | bc -l&lt;/cite&gt; prints &amp;quot;0&amp;quot;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id14" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Based on the tinyexpr library, which we modified extensively.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id15" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id6"&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;That may not be installed - NetBSD doesn't have it.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id16" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id7"&gt;[7]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;And handles how many colors the terminal supports.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id17" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id8"&gt;[8]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Okay, technically these are SYSCONFDIR/fish/config.fish and $XDG_CONFIG_HOME/fish/config.fish.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id18" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id9"&gt;[9]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Because coming from POSIX sh, arrays &lt;em&gt;are&lt;/em&gt; an afterthought.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="fish"></category></entry><entry><title>What's in a prompt?</title><link href="https://faho.github.io/whats-in-a-prompt.html" rel="alternate"></link><published>2019-12-07T14:40:00+01:00</published><updated>2019-12-07T14:40:00+01:00</updated><author><name>Fabian Homborg</name></author><id>tag:faho.github.io,2019-12-07:/whats-in-a-prompt.html</id><summary type="html">&lt;p&gt;There's something weird about shell prompts. You'll see them described as &amp;quot;minimalist&amp;quot; or featureful, and you'll see them as multiline, single-line, monochrome or lit up like a christmas tree, but they'll all incorporate the same 10 or so bits of information:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The working directory - where the shell currently &amp;quot;is&amp;quot;&lt;/li&gt;
&lt;li&gt;The â€¦&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;There's something weird about shell prompts. You'll see them described as &amp;quot;minimalist&amp;quot; or featureful, and you'll see them as multiline, single-line, monochrome or lit up like a christmas tree, but they'll all incorporate the same 10 or so bits of information:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The working directory - where the shell currently &amp;quot;is&amp;quot;&lt;/li&gt;
&lt;li&gt;The prompt symbol - a &lt;cite&gt;$&lt;/cite&gt; or a &lt;cite&gt;#&lt;/cite&gt; or a &lt;cite&gt;&amp;gt;&lt;/cite&gt;, in fancier prompts a unicode symbol&lt;/li&gt;
&lt;li&gt;The last status - what the last program returned&lt;/li&gt;
&lt;li&gt;The current VCS status - what's the git branch?&lt;/li&gt;
&lt;li&gt;Any other &amp;quot;global tool state&amp;quot; - virtualenv, ruby env&lt;/li&gt;
&lt;li&gt;Vi-mode - if you use vi-style bindings, this is quite important &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;the time&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My own prompt also features a battery indicator and used to show the currently playing song in mpd, but those are unusual.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;So important in fact that fish automatically enables it for you.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="fish"></category></entry><entry><title>The best FAQ doesn't exist</title><link href="https://faho.github.io/the-best-faq-doesnt-exist.html" rel="alternate"></link><published>2019-07-16T20:20:00+02:00</published><updated>2019-07-16T20:20:00+02:00</updated><author><name>Fabian Homborg</name></author><id>tag:faho.github.io,2019-07-16:/the-best-faq-doesnt-exist.html</id><summary type="html">&lt;p&gt;In fish &amp;lt; 3.0, we've had a frequently asked question &lt;a class="footnote-reference" href="#id4" id="id1"&gt;[1]&lt;/a&gt; that adding bindings in your config.fish (the configuration file) didn't work.&lt;/p&gt;
&lt;p&gt;You see, fish doesn't use the common &amp;quot;readline&amp;quot; library, but has its own input/output facilities, and to bind keys you'd just execute a &lt;cite&gt;bind&lt;/cite&gt; command like â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;In fish &amp;lt; 3.0, we've had a frequently asked question &lt;a class="footnote-reference" href="#id4" id="id1"&gt;[1]&lt;/a&gt; that adding bindings in your config.fish (the configuration file) didn't work.&lt;/p&gt;
&lt;p&gt;You see, fish doesn't use the common &amp;quot;readline&amp;quot; library, but has its own input/output facilities, and to bind keys you'd just execute a &lt;cite&gt;bind&lt;/cite&gt; command like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="se"&gt;\c&lt;/span&gt;g forward-word
&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="se"&gt;\t&lt;/span&gt; &lt;span class="nb"&gt;complete&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that works if you're doing it interactively, so you like the binding and add it to your config file, and restart fish and... the bindings are gone?&lt;/p&gt;
&lt;p&gt;This was a pretty frequent question for us, and we'd always answer the same:&lt;/p&gt;
&lt;blockquote&gt;
You can't add bindings in config.fish, you'll have to add them to a function called &lt;cite&gt;fish_user_key_bindings&lt;/cite&gt;.&lt;/blockquote&gt;
&lt;p&gt;The reason for this was a pretty fundamental decision that:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We'd support an emacs-inspired &amp;quot;default&amp;quot; mode and a vi-inspired &amp;quot;vi&amp;quot; mode &lt;a class="footnote-reference" href="#id5" id="id2"&gt;[2]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Switching between the two would leave you with the same bindings every time&lt;/li&gt;
&lt;li&gt;Setting up the mode could be done by setting a variable, global or universal &lt;a class="footnote-reference" href="#id6" id="id3"&gt;[3]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because of all these, what we did was to load the bindings &lt;em&gt;after&lt;/em&gt; reading the config file (because the variable could be set there), and because of the second, we'd &lt;em&gt;erase&lt;/em&gt; all bindings whenever a binding mode was picked. The result was changes from the config file disappearing.&lt;/p&gt;
&lt;p&gt;Now, fixing this took me quite a while, and the fix turns out to be surprisingly elegant and simple:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;There are now &amp;quot;preset&amp;quot; and &amp;quot;user&amp;quot; bindings&lt;/li&gt;
&lt;li&gt;Modes set up their bindings as preset bindings&lt;/li&gt;
&lt;li&gt;Switching mode just erases the preset bindings&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That means if you tried out vi-mode and decide to go back, it just erases all the h/j/k/l and such bindings and leaves your custom stuff untouched.&lt;/p&gt;
&lt;p&gt;This has the further advantage that you can now decide to remove a custom binding and it'll leave the preset.&lt;/p&gt;
&lt;p&gt;But what's best about this is that I no longer have to answer the FAQ. It just simply stopped existing.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;That should have been an actual FAQ entry. Sorry!&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id5" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;And theoretically other modes, someone just has to write them.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Universal variables are persistently stored variables - fish saves them to disk, and shares them among the running sessions.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="fish"></category></entry><entry><title>Cool stuff in fish 3.1</title><link href="https://faho.github.io/cool-stuff-in-fish-31.html" rel="alternate"></link><published>2019-06-29T20:20:00+02:00</published><updated>2019-06-29T20:20:00+02:00</updated><author><name>Fabian Homborg</name></author><id>tag:faho.github.io,2019-06-29:/cool-stuff-in-fish-31.html</id><summary type="html">&lt;p&gt;We're at that point in the release cycle where it's taking shape, and we're slowly thinking about maybe releasing. We don't have a set release schedule or anything, and there's quite some stabilization to be done, but we know most of what will be in the release, so now seems â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;We're at that point in the release cycle where it's taking shape, and we're slowly thinking about maybe releasing. We don't have a set release schedule or anything, and there's quite some stabilization to be done, but we know most of what will be in the release, so now seems like a good time to talk about it.&lt;/p&gt;
&lt;p&gt;So here's some of my favorite things about the next fish release:&lt;/p&gt;
&lt;div class="section" id="no-more-buffering-in-some-cases"&gt;
&lt;h2&gt;No more buffering (in some cases)&lt;/h2&gt;
&lt;p&gt;Fish has a long-standing issue, in that it fully buffers the output of all builtins and functions.&lt;/p&gt;
&lt;p&gt;That means that, for instance, something like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat largefile &lt;span class="o"&gt;|&lt;/span&gt; grep something
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;would only show the output once everything was processed (because fish ships a default &lt;cite&gt;grep --color=auto&lt;/cite&gt; &amp;quot;alias&amp;quot; &lt;a class="footnote-reference" href="#id9" id="id1"&gt;[1]&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In 3.1, this restriction was relaxed for the last process in a pipeline, so the above won't buffer anymore. This makes some things much faster, and even allows functions to read indefinite output - &lt;cite&gt;ip monitor | grep&lt;/cite&gt; would appear to hang before.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nicer-error-messages"&gt;
&lt;h2&gt;Nicer error messages&lt;/h2&gt;
&lt;p&gt;Our builtins were a bit... chatty, when it came to errors.&lt;/p&gt;
&lt;img alt="An old error, showing a massive stack trace and a usage summary" src="../img/cd-error-old.png" style="height: 300px;" /&gt;
&lt;img alt="The same error in the new version, with the stack trace slimmed down and the usage summary removed" src="../img/cd-error-new.png" style="height: 200px;" /&gt;
&lt;p&gt;&lt;a class="footnote-reference" href="#id10" id="id2"&gt;[2]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also &lt;cite&gt;test&lt;/cite&gt; now shows a stack trace on error, making it actually possible to find where the error occured. This is especially important because &lt;cite&gt;test&lt;/cite&gt; has some sharp edges.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;argparse&lt;/cite&gt;'s error messages now use the current function name by default, so it's often unnecessary to explicitly give a name. Since argparse parses arg(ument)s, its errors are errors of the &amp;quot;program&amp;quot; or function it parses them for, so this seemed like the right thing to do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="brace-expansion-doesn-t-trigger-unless-necessary"&gt;
&lt;h2&gt;Brace expansion doesn't trigger unless necessary&lt;/h2&gt;
&lt;p&gt;One of my favorite things is making FAQs obsolete.&lt;/p&gt;
&lt;p&gt;A question we frequently get &lt;a class="footnote-reference" href="#id11" id="id3"&gt;[3]&lt;/a&gt; is why &lt;cite&gt;git reset HEAD&amp;#64;{0}&lt;/cite&gt; isn't working. The reason for that is that fish, unlike e.g. bash, interpreted the &lt;cite&gt;{0}&lt;/cite&gt; as a brace expansion &lt;a class="footnote-reference" href="#id12" id="id4"&gt;[4]&lt;/a&gt; with one element, so it expanded to &lt;cite&gt;git reset HEAD&amp;#64;0&lt;/cite&gt;, and git wouldn't take that.&lt;/p&gt;
&lt;p&gt;Instead, we now only interpret braces as triggering brace expansion if there is a &amp;quot;,&amp;quot; (i.e. more than one element) or a variable expansion (possibly more than one element). So git works as expected, any useful brace expansion continues working.&lt;/p&gt;
&lt;p&gt;This is, strictly speaking, backwards-incompatible. We still allow it because it's very unlikely to be a problem in practice, because the old syntax was useless &lt;a class="footnote-reference" href="#id13" id="id5"&gt;[5]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-builtin-niceties"&gt;
&lt;h2&gt;Some builtin niceties&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;cite&gt;-q&lt;/cite&gt; now means &amp;quot;query&amp;quot; across the board for all &amp;quot;does this kind of thing exist&amp;quot; builtins - whether it's &lt;cite&gt;command&lt;/cite&gt;, &lt;cite&gt;functions&lt;/cite&gt;, &lt;cite&gt;builtin&lt;/cite&gt; or &lt;cite&gt;type&lt;/cite&gt;.&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;complete -C foo&lt;/cite&gt; works instead of requiring &lt;cite&gt;complete -Cfoo&lt;/cite&gt;.&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;math&lt;/cite&gt; now allows &amp;quot;x&amp;quot; for multiplication. This is useful because &lt;cite&gt;math&lt;/cite&gt; is an ordinary builtin, so &lt;cite&gt;*&lt;/cite&gt; would be expanded. &lt;cite&gt;math 5 x 2&lt;/cite&gt; is nicer to type than &lt;cite&gt;math '5 * 2'&lt;/cite&gt;.&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;count&lt;/cite&gt; will now also read from stdin - &lt;cite&gt;count &amp;lt;/etc/hosts&lt;/cite&gt; now works.&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;argparse&lt;/cite&gt; gained a new &lt;cite&gt;--ignore-unknown&lt;/cite&gt; option so you can parse the arguments in multiple stages (or, in completions, ignore options you don't care about).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="nicer-semicolon-handling-in-fish-indent"&gt;
&lt;h2&gt;Nicer semicolon handling in fish_indent&lt;/h2&gt;
&lt;p&gt;&lt;cite&gt;fish_indent&lt;/cite&gt;, our autoformatter for fish scripts, will now turn most semicolons into line breaks.&lt;/p&gt;
&lt;p&gt;So&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;echo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;becomes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;echo&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The exception is &lt;cite&gt;and&lt;/cite&gt; and &lt;cite&gt;or&lt;/cite&gt;, because we are okay with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;foo&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and don't really want&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;
&lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So in this case, it will just keep whatever is there, whether that's line breaks or semicolons.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unicode-version-autodetection"&gt;
&lt;h2&gt;Unicode version autodetection&lt;/h2&gt;
&lt;p&gt;Because fish does a bunch of cursor movement (for suggestions and syntax highlighting), it needs to know the width of characters. Even worse, it needs to know what width the terminal thinks the characters are. This mostly works &lt;a class="footnote-reference" href="#id14" id="id6"&gt;[6]&lt;/a&gt;, only plenty of characters &lt;em&gt;changed&lt;/em&gt; width in Unicode 9, so we need to know if the current system understands Unicode 9 &lt;a class="footnote-reference" href="#id15" id="id7"&gt;[7]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So what we actually do is ask the system for the width of &lt;cite&gt;ðŸ˜ƒ&lt;/cite&gt;. If it says 2, we think it's Unicode 9-capable. If it says anything else, we guess it doesn't.&lt;/p&gt;
&lt;p&gt;There are some other unicode improvements, including for variation selectors and korean characters &lt;a class="footnote-reference" href="#id16" id="id8"&gt;[8]&lt;/a&gt;.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id9" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Remember, fish emulates aliases via functions.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;If I made this comparison with &lt;cite&gt;string&lt;/cite&gt; instead of &lt;cite&gt;cd&lt;/cite&gt;, the old error wouldn't fit on the screen.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id11" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;But didn't mention in the FAQ because we forgot to add it.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id12" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The &lt;cite&gt;/usr/{s,}bin&lt;/cite&gt; stuff.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id13" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;We have already changed what &lt;cite&gt;{}&lt;/cite&gt; means in 3.0 - before it was a zero-element brace expansion, which means it would always be removed entirely.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id14" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id6"&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;It's the bain of my existence.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id15" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id7"&gt;[7]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Ubuntu 16.04, which is still supported, doesn't.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id16" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id8"&gt;[8]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Both of which break a core assumption of our code - that the width of each codepoint is independent. Variation selectors change the width of what they are attached to, and korean &amp;quot;characters&amp;quot; are composed of three parts, each of which their own codepoint. Truly solving this requires a major rearchitecture, so we hack around it for now.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="fish"></category></entry><entry><title>Sometimes, support tools can delight</title><link href="https://faho.github.io/sometimes-support-tools-can-delight.html" rel="alternate"></link><published>2019-06-28T19:20:00+02:00</published><updated>2019-06-28T19:20:00+02:00</updated><author><name>Fabian Homborg</name></author><id>tag:faho.github.io,2019-06-28:/sometimes-support-tools-can-delight.html</id><summary type="html">&lt;p&gt;What's this blogging thing all about? Lemme check!&lt;/p&gt;
&lt;p&gt;So, there's a recent addition to &lt;a class="reference external" href="https://fishshell.com"&gt;fish&lt;/a&gt; that I really like. It's called &amp;quot;littlecheck&amp;quot;, and it's a new test driver &lt;a class="footnote-reference" href="#id9" id="id1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, test drivers are unlikely to ever really receive praise (or even be mentioned at all in most contexts), but they're â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;What's this blogging thing all about? Lemme check!&lt;/p&gt;
&lt;p&gt;So, there's a recent addition to &lt;a class="reference external" href="https://fishshell.com"&gt;fish&lt;/a&gt; that I really like. It's called &amp;quot;littlecheck&amp;quot;, and it's a new test driver &lt;a class="footnote-reference" href="#id9" id="id1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, test drivers are unlikely to ever really receive praise (or even be mentioned at all in most contexts), but they're surprisingly impactful. A bad test driver will leave you scratching your head if you have a failure, or will introduce friction to adding tests, which will make people not add tests.&lt;/p&gt;
&lt;p&gt;For example, in our previous driver, each test consisted of three files:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;test.in, the file to actually run.&lt;/li&gt;
&lt;li&gt;test.out - the stdout of running test.in&lt;/li&gt;
&lt;li&gt;test.err - the stderr&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Which had a few problems:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;To create a new test, you need to create 3 files.&lt;/li&gt;
&lt;li&gt;To figure out where a test failed, you need to follow 3 files at the same time&lt;/li&gt;
&lt;li&gt;The &amp;quot;.in&amp;quot; is a fish script, but it can't be called &amp;quot;.fish&amp;quot; for internal reasons &lt;a class="footnote-reference" href="#id10" id="id2"&gt;[2]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The replacement looks a little something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;#RUN: %fish %s&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; banana
&lt;span class="c"&gt;#CHECK: banana&lt;/span&gt;
date +%Y
&lt;span class="c"&gt;#CHECK: 20{{\d+}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which immediately solves all the above issues (the files are indeed called &amp;quot;something.fish&amp;quot; &lt;a class="footnote-reference" href="#id11" id="id3"&gt;[3]&lt;/a&gt;), but also some I haven't even talked about yet.&lt;/p&gt;
&lt;p&gt;See, we had an odd bug where redirecting to a directory (&lt;tt class="docutils literal"&gt;echo something &amp;gt; /directory/&lt;/tt&gt;) didn't immediately fail. That's certainly something you'd like to test, and we did for quite a while. We just tested that redirecting to &lt;cite&gt;.&lt;/cite&gt; failed with an error, and that was that. One file for the command, one file for the error and one file just because.&lt;/p&gt;
&lt;p&gt;Fast forward 5 years to this January, when I was working on getting test suite to succeed on Solaris &lt;a class="footnote-reference" href="#id12" id="id4"&gt;[4]&lt;/a&gt;. As it turns out Solaris also prints an error, but a different one (instead of &amp;quot;Is a directory&amp;quot; EISDIR you'd get &amp;quot;Invalid argument&amp;quot; EINVAL). The old test driver had no way to express this, and the error couldn't be redirected (because it's a syntax error), so this required us to disable the test. &lt;a class="footnote-reference" href="#id13" id="id5"&gt;[5]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Then we got another test driver (yes, that's two in parallel), which ran &amp;quot;invocation tests&amp;quot;, which checked how fish behaved when calling the binary with options. This was enough of an indirection that we managed to wedge in a way to use different test output depending on &lt;cite&gt;uname&lt;/cite&gt;, so it worked again. But this required:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A second test driver&lt;/li&gt;
&lt;li&gt;Checking operating system based on _name_, not feature testing. Using &lt;cite&gt;uname&lt;/cite&gt; should be avoided if at all possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So what does littlecheck do here? See that &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;{{\d+}}&lt;/span&gt;&lt;/tt&gt; above? That's an embedded regex that matches any string of digits, meaning that &lt;tt class="docutils literal"&gt;date&lt;/tt&gt; test will succeed as long as it's run in this century, or in about 18000 years &lt;a class="footnote-reference" href="#id14" id="id6"&gt;[6]&lt;/a&gt;. Or, alternatively, you could use it for something useful like this actual test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;#RUN: %fish %s&lt;/span&gt;
&lt;span class="k"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; . &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;status&lt;/span&gt; -b&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;status -b returned true after bad redirect on a begin block&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# Note that we sometimes get fancy quotation marks here, so let&amp;#39;s match three characters&lt;/span&gt;
&lt;span class="c"&gt;#CHECKERR: &amp;lt;W&amp;gt; fish: An error occurred while redirecting file {{...}}&lt;/span&gt;
&lt;span class="c"&gt;#CHECKERR: {{open: Is a directory|open: Invalid argument}}&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$status&lt;/span&gt;
&lt;span class="c"&gt;#CHECK: 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So you just embed the possibilities in a regex, and it'll just allow both. &lt;a class="footnote-reference" href="#id15" id="id7"&gt;[7]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hopefully you'll see why I really like this (thanks ridiculousfish!), and I haven't even mentioned the cherries on top:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It's entirely fish-agnostic - this can run any scripting language (that uses &lt;cite&gt;#&lt;/cite&gt; as a comment character)&lt;/li&gt;
&lt;li&gt;It's one single python file, no further dependencies&lt;/li&gt;
&lt;li&gt;It's public domain &lt;a class="footnote-reference" href="#id16" id="id8"&gt;[8]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Littlecheck is available at &lt;a class="reference external" href="https://github.com/ridiculousfish/littlecheck"&gt;https://github.com/ridiculousfish/littlecheck&lt;/a&gt;. I kinda love it right now.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id9" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I define &amp;quot;test driver&amp;quot; as &amp;quot;thing that runs the tests&amp;quot;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;We glob, and they are in the same directory as the main &amp;quot;test.fish&amp;quot; orchestration script. I didn't say it was a good reason!&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id11" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Which makes text editors highlight them as fish scripts, which makes me happy.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id12" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Or Illumos, or OpenIndiana? I still don't get the nomenclature.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id13" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Alternatively, we could have caught the error and swapped it for the other one. But that would require behavioral changes, and it's not clear that every EINVAL is because of a directory, so we'd have to figure that out or just use the more generic error everywhere.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id14" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id6"&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;It's not an actual test we use.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id15" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id7"&gt;[7]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;For astute readers, there's another thing this allows, which required us to disable even the invocation tests.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id16" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id8"&gt;[8]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;My thoughts on licensing are a tad more complex, but in short I believe for a simple thing like this you want it to be drop-in-and-forget.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="fish"></category></entry></feed>